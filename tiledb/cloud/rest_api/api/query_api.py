"""
    TileDB Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 2.2.19
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from tiledb.cloud.rest_api.api_client import ApiClient
from tiledb.cloud.rest_api.api_client import Endpoint as _Endpoint
from tiledb.cloud.rest_api.model.error import Error
from tiledb.cloud.rest_api.model.query import Query
from tiledb.cloud.rest_api.model.query_json import QueryJson
from tiledb.cloud.rest_api.model_utils import check_allowed_values  # noqa: F401
from tiledb.cloud.rest_api.model_utils import check_validations
from tiledb.cloud.rest_api.model_utils import date
from tiledb.cloud.rest_api.model_utils import datetime
from tiledb.cloud.rest_api.model_utils import file_type
from tiledb.cloud.rest_api.model_utils import none_type
from tiledb.cloud.rest_api.model_utils import validate_and_convert_types


class QueryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.finalize_query_endpoint = _Endpoint(
            settings={
                "response_type": (Query,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/arrays/{namespace}/{array}/query/finalize",
                "operation_id": "finalize_query",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "array",
                    "type",
                    "content_type",
                    "query",
                    "x_payer",
                    "open_at",
                ],
                "required": [
                    "namespace",
                    "array",
                    "type",
                    "content_type",
                    "query",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "array": (str,),
                    "type": (str,),
                    "content_type": (str,),
                    "query": (Query,),
                    "x_payer": (str,),
                    "open_at": (int,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "array": "array",
                    "type": "type",
                    "content_type": "Content-Type",
                    "x_payer": "X-Payer",
                    "open_at": "open_at",
                },
                "location_map": {
                    "namespace": "path",
                    "array": "path",
                    "type": "query",
                    "content_type": "header",
                    "query": "body",
                    "x_payer": "header",
                    "open_at": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/capnp"],
                "content_type": ["application/json", "application/capnp"],
            },
            api_client=api_client,
        )
        self.get_est_result_sizes_endpoint = _Endpoint(
            settings={
                "response_type": (Query,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/arrays/{namespace}/{array}/query/est_result_sizes",
                "operation_id": "get_est_result_sizes",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "array",
                    "type",
                    "content_type",
                    "query",
                    "x_payer",
                    "open_at",
                ],
                "required": [
                    "namespace",
                    "array",
                    "type",
                    "content_type",
                    "query",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "array": (str,),
                    "type": (str,),
                    "content_type": (str,),
                    "query": (Query,),
                    "x_payer": (str,),
                    "open_at": (int,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "array": "array",
                    "type": "type",
                    "content_type": "Content-Type",
                    "x_payer": "X-Payer",
                    "open_at": "open_at",
                },
                "location_map": {
                    "namespace": "path",
                    "array": "path",
                    "type": "query",
                    "content_type": "header",
                    "query": "body",
                    "x_payer": "header",
                    "open_at": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/capnp"],
                "content_type": ["application/json", "application/capnp"],
            },
            api_client=api_client,
        )
        self.get_file_endpoint = _Endpoint(
            settings={
                "response_type": (file_type,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/arrays/{namespace}/{array}/query/get_file",
                "operation_id": "get_file",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "array",
                    "content_type",
                    "x_payer",
                ],
                "required": [
                    "namespace",
                    "array",
                    "content_type",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "array": (str,),
                    "content_type": (str,),
                    "x_payer": (str,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "array": "array",
                    "content_type": "Content-Type",
                    "x_payer": "X-Payer",
                },
                "location_map": {
                    "namespace": "path",
                    "array": "path",
                    "content_type": "header",
                    "x_payer": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/x-ipynb+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.submit_query_endpoint = _Endpoint(
            settings={
                "response_type": (Query,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/arrays/{namespace}/{array}/query/submit",
                "operation_id": "submit_query",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "array",
                    "type",
                    "content_type",
                    "query",
                    "x_payer",
                    "open_at",
                ],
                "required": [
                    "namespace",
                    "array",
                    "type",
                    "content_type",
                    "query",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "array": (str,),
                    "type": (str,),
                    "content_type": (str,),
                    "query": (Query,),
                    "x_payer": (str,),
                    "open_at": (int,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "array": "array",
                    "type": "type",
                    "content_type": "Content-Type",
                    "x_payer": "X-Payer",
                    "open_at": "open_at",
                },
                "location_map": {
                    "namespace": "path",
                    "array": "path",
                    "type": "query",
                    "content_type": "header",
                    "query": "body",
                    "x_payer": "header",
                    "open_at": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/capnp"],
                "content_type": ["application/json", "application/capnp"],
            },
            api_client=api_client,
        )
        self.submit_query_json_endpoint = _Endpoint(
            settings={
                "response_type": (
                    bool,
                    date,
                    datetime,
                    dict,
                    float,
                    int,
                    list,
                    str,
                    none_type,
                ),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/arrays/{namespace}/{array}/query/submit_query_json",
                "operation_id": "submit_query_json",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "array",
                    "content_type",
                    "query_json",
                    "x_payer",
                ],
                "required": [
                    "namespace",
                    "array",
                    "content_type",
                    "query_json",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "array": (str,),
                    "content_type": (str,),
                    "query_json": (QueryJson,),
                    "x_payer": (str,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "array": "array",
                    "content_type": "Content-Type",
                    "x_payer": "X-Payer",
                },
                "location_map": {
                    "namespace": "path",
                    "array": "path",
                    "content_type": "header",
                    "query_json": "body",
                    "x_payer": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )

    def finalize_query(
        self, namespace, array, type, query, content_type="application/json", **kwargs
    ):
        """finalize_query  # noqa: E501

        send a query to run against a specified array/URI registered to a group/project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.finalize_query(namespace, array, type, query, content_type="application/json", async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace array is in (an organization name or user's username)
            array (str): name/uri of array that is url-encoded
            type (str): type of query
            query (Query): query to run
            content_type (str): Content Type of input and return mime. defaults to "application/json", must be one of ["application/json"]

        Keyword Args:
            x_payer (str): Name of organization or user who should be charged for this request. [optional]
            open_at (int): open_at for array in unix epoch. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Query
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["array"] = array
        kwargs["type"] = type
        kwargs["content_type"] = content_type
        kwargs["query"] = query
        return self.finalize_query_endpoint.call_with_http_info(**kwargs)

    def get_est_result_sizes(
        self, namespace, array, type, query, content_type="application/json", **kwargs
    ):
        """get_est_result_sizes  # noqa: E501

        send a query to run against a specified array/URI registered to a group/project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_est_result_sizes(namespace, array, type, query, content_type="application/json", async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace array is in (an organization name or user's username)
            array (str): name/uri of array that is url-encoded
            type (str): type of query
            query (Query): query to run
            content_type (str): Content Type of input and return mime. defaults to "application/json", must be one of ["application/json"]

        Keyword Args:
            x_payer (str): Name of organization or user who should be charged for this request. [optional]
            open_at (int): open_at for array in unix epoch. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Query
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["array"] = array
        kwargs["type"] = type
        kwargs["content_type"] = content_type
        kwargs["query"] = query
        return self.get_est_result_sizes_endpoint.call_with_http_info(**kwargs)

    def get_file(self, namespace, array, content_type="application/json", **kwargs):
        """get_file  # noqa: E501

        send a query to run against a specified array/URI registered to a group/project, returns file bytes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_file(namespace, array, content_type="application/json", async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace array is in (an organization name or user's username)
            array (str): name/uri of array that is url-encoded
            content_type (str): Content Type of input and return mime. defaults to "application/json", must be one of ["application/json"]

        Keyword Args:
            x_payer (str): Name of organization or user who should be charged for this request. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["array"] = array
        kwargs["content_type"] = content_type
        return self.get_file_endpoint.call_with_http_info(**kwargs)

    def submit_query(
        self, namespace, array, type, query, content_type="application/json", **kwargs
    ):
        """submit_query  # noqa: E501

        send a query to run against a specified array/URI registered to a group/project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.submit_query(namespace, array, type, query, content_type="application/json", async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace array is in (an organization name or user's username)
            array (str): name/uri of array that is url-encoded
            type (str): type of query
            query (Query): query to run
            content_type (str): Content Type of input and return mime. defaults to "application/json", must be one of ["application/json"]

        Keyword Args:
            x_payer (str): Name of organization or user who should be charged for this request. [optional]
            open_at (int): open_at for array in unix epoch. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Query
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["array"] = array
        kwargs["type"] = type
        kwargs["content_type"] = content_type
        kwargs["query"] = query
        return self.submit_query_endpoint.call_with_http_info(**kwargs)

    def submit_query_json(
        self, namespace, array, query_json, content_type="application/json", **kwargs
    ):
        """submit_query_json  # noqa: E501

        send a query to run against a specified array/URI registered to a group/project, returns JSON results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.submit_query_json(namespace, array, query_json, content_type="application/json", async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace array is in (an organization name or user's username)
            array (str): name/uri of array that is url-encoded
            query_json (QueryJson): query to run
            content_type (str): Content Type of input and return mime. defaults to "application/json", must be one of ["application/json"]

        Keyword Args:
            x_payer (str): Name of organization or user who should be charged for this request. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["array"] = array
        kwargs["content_type"] = content_type
        kwargs["query_json"] = query_json
        return self.submit_query_json_endpoint.call_with_http_info(**kwargs)
