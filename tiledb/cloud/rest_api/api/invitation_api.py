"""
    TileDB Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 2.2.19
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from tiledb.cloud.rest_api.api_client import ApiClient
from tiledb.cloud.rest_api.api_client import Endpoint as _Endpoint
from tiledb.cloud.rest_api.model.error import Error
from tiledb.cloud.rest_api.model.invitation_array_share_email import (
    InvitationArrayShareEmail,
)
from tiledb.cloud.rest_api.model.invitation_data import InvitationData
from tiledb.cloud.rest_api.model.invitation_organization_join_email import (
    InvitationOrganizationJoinEmail,
)
from tiledb.cloud.rest_api.model_utils import check_allowed_values  # noqa: F401
from tiledb.cloud.rest_api.model_utils import check_validations
from tiledb.cloud.rest_api.model_utils import date
from tiledb.cloud.rest_api.model_utils import datetime
from tiledb.cloud.rest_api.model_utils import file_type
from tiledb.cloud.rest_api.model_utils import none_type
from tiledb.cloud.rest_api.model_utils import validate_and_convert_types


class InvitationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.accept_invitation_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/invitations/{invitation}",
                "operation_id": "accept_invitation",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "invitation",
                ],
                "required": [
                    "invitation",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "invitation": (str,),
                },
                "attribute_map": {
                    "invitation": "invitation",
                },
                "location_map": {
                    "invitation": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.cancel_join_organization_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/invitations/{invitation}/{organization}/join",
                "operation_id": "cancel_join_organization",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "invitation",
                    "organization",
                ],
                "required": [
                    "invitation",
                    "organization",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "invitation": (str,),
                    "organization": (str,),
                },
                "attribute_map": {
                    "invitation": "invitation",
                    "organization": "organization",
                },
                "location_map": {
                    "invitation": "path",
                    "organization": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.cancel_share_array_by_invite_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/invitations/{invitation}/{namespace}/{array}/share",
                "operation_id": "cancel_share_array_by_invite",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "invitation",
                    "array",
                ],
                "required": [
                    "namespace",
                    "invitation",
                    "array",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "invitation": (str,),
                    "array": (str,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "invitation": "invitation",
                    "array": "array",
                },
                "location_map": {
                    "namespace": "path",
                    "invitation": "path",
                    "array": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.fetch_invitations_endpoint = _Endpoint(
            settings={
                "response_type": (InvitationData,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/invitations",
                "operation_id": "fetch_invitations",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "organization",
                    "array",
                    "start",
                    "end",
                    "page",
                    "per_page",
                    "type",
                    "status",
                    "orderby",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "organization": (str,),
                    "array": (str,),
                    "start": (int,),
                    "end": (int,),
                    "page": (int,),
                    "per_page": (int,),
                    "type": (str,),
                    "status": (str,),
                    "orderby": (str,),
                },
                "attribute_map": {
                    "organization": "organization",
                    "array": "array",
                    "start": "start",
                    "end": "end",
                    "page": "page",
                    "per_page": "per_page",
                    "type": "type",
                    "status": "status",
                    "orderby": "orderby",
                },
                "location_map": {
                    "organization": "query",
                    "array": "query",
                    "start": "query",
                    "end": "query",
                    "page": "query",
                    "per_page": "query",
                    "type": "query",
                    "status": "query",
                    "orderby": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.join_organization_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/invitations/{organization}/join",
                "operation_id": "join_organization",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "organization",
                    "email_invite",
                ],
                "required": [
                    "organization",
                    "email_invite",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "organization": (str,),
                    "email_invite": (InvitationOrganizationJoinEmail,),
                },
                "attribute_map": {
                    "organization": "organization",
                },
                "location_map": {
                    "organization": "path",
                    "email_invite": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.share_array_by_invite_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/invitations/{namespace}/{array}/share",
                "operation_id": "share_array_by_invite",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "array",
                    "email_invite",
                ],
                "required": [
                    "namespace",
                    "array",
                    "email_invite",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "array": (str,),
                    "email_invite": (InvitationArrayShareEmail,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "array": "array",
                },
                "location_map": {
                    "namespace": "path",
                    "array": "path",
                    "email_invite": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )

    def accept_invitation(self, invitation, **kwargs):
        """accept_invitation  # noqa: E501

        Accepts invitation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.accept_invitation(invitation, async_req=True)
        >>> result = thread.get()

        Args:
            invitation (str): the ID of invitation about to be accepted

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["invitation"] = invitation
        return self.accept_invitation_endpoint.call_with_http_info(**kwargs)

    def cancel_join_organization(self, invitation, organization, **kwargs):
        """cancel_join_organization  # noqa: E501

        Cancels join organization invitation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_join_organization(invitation, organization, async_req=True)
        >>> result = thread.get()

        Args:
            invitation (str): the ID of invitation about to be cancelled
            organization (str): name or UUID of organization

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["invitation"] = invitation
        kwargs["organization"] = organization
        return self.cancel_join_organization_endpoint.call_with_http_info(**kwargs)

    def cancel_share_array_by_invite(self, namespace, invitation, array, **kwargs):
        """cancel_share_array_by_invite  # noqa: E501

        Cancels array sharing invitation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_share_array_by_invite(namespace, invitation, array, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace array is in (an organization name or user's username)
            invitation (str): the ID of invitation about to be cancelled
            array (str): name/uri of array that is url-encoded

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["invitation"] = invitation
        kwargs["array"] = array
        return self.cancel_share_array_by_invite_endpoint.call_with_http_info(**kwargs)

    def fetch_invitations(self, **kwargs):
        """fetch_invitations  # noqa: E501

        Fetch a list of invitations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_invitations(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            organization (str): name or ID of organization to filter. [optional]
            array (str): name/uri of array that is url-encoded to filter. [optional]
            start (int): start time for tasks to filter by. [optional]
            end (int): end time for tasks to filter by. [optional]
            page (int): pagination offset. [optional]
            per_page (int): pagination limit. [optional]
            type (str): invitation type, \"ARRAY_SHARE\", \"JOIN_ORGANIZATION\". [optional]
            status (str): Filter to only return \"PENDING\", \"ACCEPTED\". [optional]
            orderby (str): sort by which field valid values include timestamp, array_name, organization_name. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InvitationData
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        return self.fetch_invitations_endpoint.call_with_http_info(**kwargs)

    def join_organization(self, organization, email_invite, **kwargs):
        """join_organization  # noqa: E501

        Sends email to multiple recipients with joining information regarding an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.join_organization(organization, email_invite, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): name or UUID of organization
            email_invite (InvitationOrganizationJoinEmail): list of email recipients

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["organization"] = organization
        kwargs["email_invite"] = email_invite
        return self.join_organization_endpoint.call_with_http_info(**kwargs)

    def share_array_by_invite(self, namespace, array, email_invite, **kwargs):
        """share_array_by_invite  # noqa: E501

        Sends email to multiple recipients with sharing information regarding an array  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.share_array_by_invite(namespace, array, email_invite, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace array is in (an organization name or user's username)
            array (str): name/uri of array that is url-encoded
            email_invite (InvitationArrayShareEmail): list of email recipients

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["array"] = array
        kwargs["email_invite"] = email_invite
        return self.share_array_by_invite_endpoint.call_with_http_info(**kwargs)
