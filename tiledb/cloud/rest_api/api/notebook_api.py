"""
    TileDB Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 2.2.19
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from tiledb.cloud.rest_api.api_client import ApiClient
from tiledb.cloud.rest_api.api_client import Endpoint as _Endpoint
from tiledb.cloud.rest_api.model.array_info_update import ArrayInfoUpdate
from tiledb.cloud.rest_api.model.error import Error
from tiledb.cloud.rest_api.model.file_uploaded import FileUploaded
from tiledb.cloud.rest_api.model.notebook_copied import NotebookCopied
from tiledb.cloud.rest_api.model.notebook_copy import NotebookCopy
from tiledb.cloud.rest_api.model.notebook_status import NotebookStatus
from tiledb.cloud.rest_api.model_utils import check_allowed_values  # noqa: F401
from tiledb.cloud.rest_api.model_utils import check_validations
from tiledb.cloud.rest_api.model_utils import date
from tiledb.cloud.rest_api.model_utils import datetime
from tiledb.cloud.rest_api.model_utils import file_type
from tiledb.cloud.rest_api.model_utils import none_type
from tiledb.cloud.rest_api.model_utils import validate_and_convert_types


class NotebookApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_notebook_server_status_endpoint = _Endpoint(
            settings={
                "response_type": (NotebookStatus,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/notebooks/server/{namespace}/status",
                "operation_id": "get_notebook_server_status",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                ],
                "required": [
                    "namespace",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                },
                "location_map": {
                    "namespace": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.handle_copy_notebook_endpoint = _Endpoint(
            settings={
                "response_type": (NotebookCopied,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/notebooks/{namespace}/{array}/copy",
                "operation_id": "handle_copy_notebook",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "array",
                    "notebook_copy",
                    "x_tiledb_cloud_access_credentials_name",
                    "end_timestamp",
                ],
                "required": [
                    "namespace",
                    "array",
                    "notebook_copy",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "array": (str,),
                    "notebook_copy": (NotebookCopy,),
                    "x_tiledb_cloud_access_credentials_name": (str,),
                    "end_timestamp": (int,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "array": "array",
                    "x_tiledb_cloud_access_credentials_name": "X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME",
                    "end_timestamp": "end_timestamp",
                },
                "location_map": {
                    "namespace": "path",
                    "array": "path",
                    "notebook_copy": "body",
                    "x_tiledb_cloud_access_credentials_name": "header",
                    "end_timestamp": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.handle_upload_notebook_endpoint = _Endpoint(
            settings={
                "response_type": (FileUploaded,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/notebooks/{namespace}/upload",
                "operation_id": "handle_upload_notebook",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "input_file",
                    "x_tiledb_cloud_access_credentials_name",
                    "output_uri",
                    "name",
                ],
                "required": [
                    "namespace",
                    "input_file",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "input_file": (file_type,),
                    "x_tiledb_cloud_access_credentials_name": (str,),
                    "output_uri": (str,),
                    "name": (str,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "input_file": "input_file",
                    "x_tiledb_cloud_access_credentials_name": "X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME",
                    "output_uri": "output_uri",
                    "name": "name",
                },
                "location_map": {
                    "namespace": "path",
                    "input_file": "form",
                    "x_tiledb_cloud_access_credentials_name": "header",
                    "output_uri": "form",
                    "name": "form",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["multipart/form-data"],
            },
            api_client=api_client,
        )
        self.shutdown_notebook_server_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/notebooks/server/{namespace}",
                "operation_id": "shutdown_notebook_server",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                ],
                "required": [
                    "namespace",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                },
                "location_map": {
                    "namespace": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.update_notebook_name_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/notebooks/{namespace}/{array}/rename",
                "operation_id": "update_notebook_name",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "array",
                    "notebook_metadata",
                ],
                "required": [
                    "namespace",
                    "array",
                    "notebook_metadata",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "array": (str,),
                    "notebook_metadata": (ArrayInfoUpdate,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "array": "array",
                },
                "location_map": {
                    "namespace": "path",
                    "array": "path",
                    "notebook_metadata": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )

    def get_notebook_server_status(self, namespace, **kwargs):
        """get_notebook_server_status  # noqa: E501

        Get status of the notebook server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_notebook_server_status(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace notebook is in (an organization name or user's username)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NotebookStatus
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        return self.get_notebook_server_status_endpoint.call_with_http_info(**kwargs)

    def handle_copy_notebook(self, namespace, array, notebook_copy, **kwargs):
        """handle_copy_notebook  # noqa: E501

        Copy a tiledb notebook at the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.handle_copy_notebook(namespace, array, notebook_copy, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): The namespace of the notebook
            array (str): The name of the notebook
            notebook_copy (NotebookCopy): Input/Output information to create a new TileDB file

        Keyword Args:
            x_tiledb_cloud_access_credentials_name (str): Optional registered access credentials to use for creation. [optional]
            end_timestamp (int): Milliseconds since Unix epoch, copy will use open_at functionality to copy notebook created at the specific timestamp. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NotebookCopied
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["array"] = array
        kwargs["notebook_copy"] = notebook_copy
        return self.handle_copy_notebook_endpoint.call_with_http_info(**kwargs)

    def handle_upload_notebook(self, namespace, input_file, **kwargs):
        """handle_upload_notebook  # noqa: E501

        Upload a notebook at the specified location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.handle_upload_notebook(namespace, input_file, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): The namespace of the notebook
            input_file (file_type): the notebook to upload

        Keyword Args:
            x_tiledb_cloud_access_credentials_name (str): Optional registered access credentials to use for creation. [optional]
            output_uri (str): output location of the TileDB File. [optional]
            name (str): name to set for registered file. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            FileUploaded
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["input_file"] = input_file
        return self.handle_upload_notebook_endpoint.call_with_http_info(**kwargs)

    def shutdown_notebook_server(self, namespace, **kwargs):
        """shutdown_notebook_server  # noqa: E501

        Shutdown a notebook server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.shutdown_notebook_server(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace notebook is in (an organization name or user's username)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        return self.shutdown_notebook_server_endpoint.call_with_http_info(**kwargs)

    def update_notebook_name(self, namespace, array, notebook_metadata, **kwargs):
        """update_notebook_name  # noqa: E501

        update name on a notebok, moving related S3 object to new location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_notebook_name(namespace, array, notebook_metadata, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace array is in (an organization name or user's username)
            array (str): name/uri of notebook (array) that is url-encoded
            notebook_metadata (ArrayInfoUpdate): notebook (array) metadata to update

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["array"] = array
        kwargs["notebook_metadata"] = notebook_metadata
        return self.update_notebook_name_endpoint.call_with_http_info(**kwargs)
