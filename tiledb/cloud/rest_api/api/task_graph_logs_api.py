"""
    TileDB Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 2.2.19
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from tiledb.cloud.rest_api.api_client import ApiClient
from tiledb.cloud.rest_api.api_client import Endpoint as _Endpoint
from tiledb.cloud.rest_api.model.error import Error
from tiledb.cloud.rest_api.model.task_graph_client_node_status import (
    TaskGraphClientNodeStatus,
)
from tiledb.cloud.rest_api.model.task_graph_log import TaskGraphLog
from tiledb.cloud.rest_api.model.task_graph_logs_data import TaskGraphLogsData
from tiledb.cloud.rest_api.model_utils import check_allowed_values  # noqa: F401
from tiledb.cloud.rest_api.model_utils import check_validations
from tiledb.cloud.rest_api.model_utils import date
from tiledb.cloud.rest_api.model_utils import datetime
from tiledb.cloud.rest_api.model_utils import file_type
from tiledb.cloud.rest_api.model_utils import none_type
from tiledb.cloud.rest_api.model_utils import validate_and_convert_types


class TaskGraphLogsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_task_graph_log_endpoint = _Endpoint(
            settings={
                "response_type": (TaskGraphLog,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/taskgraphs/{namespace}/log",
                "operation_id": "create_task_graph_log",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "log",
                ],
                "required": [
                    "namespace",
                    "log",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "log": (TaskGraphLog,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                },
                "location_map": {
                    "namespace": "path",
                    "log": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.get_task_graph_log_endpoint = _Endpoint(
            settings={
                "response_type": (TaskGraphLog,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/taskgraphs/{namespace}/logs/{id}",
                "operation_id": "get_task_graph_log",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "id",
                ],
                "required": [
                    "namespace",
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "id": (str,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "id": "id",
                },
                "location_map": {
                    "namespace": "path",
                    "id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.list_task_graph_logs_endpoint = _Endpoint(
            settings={
                "response_type": (TaskGraphLogsData,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/taskgraphs/logs",
                "operation_id": "list_task_graph_logs",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "created_by",
                    "search",
                    "start_time",
                    "end_time",
                    "page",
                    "per_page",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "created_by": (str,),
                    "search": (str,),
                    "start_time": (datetime,),
                    "end_time": (datetime,),
                    "page": (int,),
                    "per_page": (int,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "created_by": "created_by",
                    "search": "search",
                    "start_time": "start_time",
                    "end_time": "end_time",
                    "page": "page",
                    "per_page": "per_page",
                },
                "location_map": {
                    "namespace": "query",
                    "created_by": "query",
                    "search": "query",
                    "start_time": "query",
                    "end_time": "query",
                    "page": "query",
                    "per_page": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.report_client_node_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/taskgraphs/{namespace}/logs/{id}/report_client_node",
                "operation_id": "report_client_node",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "id",
                    "report",
                ],
                "required": [
                    "namespace",
                    "id",
                    "report",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "id": (str,),
                    "report": (TaskGraphClientNodeStatus,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "id": "id",
                },
                "location_map": {
                    "namespace": "path",
                    "id": "path",
                    "report": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.update_task_graph_log_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/taskgraphs/{namespace}/logs/{id}",
                "operation_id": "update_task_graph_log",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "id",
                    "log",
                ],
                "required": [
                    "namespace",
                    "id",
                    "log",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "id": (str,),
                    "log": (TaskGraphLog,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "id": "id",
                },
                "location_map": {
                    "namespace": "path",
                    "id": "path",
                    "log": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )

    def create_task_graph_log(self, namespace, log, **kwargs):
        """create_task_graph_log  # noqa: E501

        Create a task graph log.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_task_graph_log(namespace, log, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): The namespace that will own this task graph log.
            log (TaskGraphLog):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TaskGraphLog
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["log"] = log
        return self.create_task_graph_log_endpoint.call_with_http_info(**kwargs)

    def get_task_graph_log(self, namespace, id, **kwargs):
        """get_task_graph_log  # noqa: E501

        Fetch information about a single task graph execution.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_task_graph_log(namespace, id, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): The namespace that owns this task graph log.
            id (str): The UUID of the task graph log entry.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TaskGraphLog
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["id"] = id
        return self.get_task_graph_log_endpoint.call_with_http_info(**kwargs)

    def list_task_graph_logs(self, **kwargs):
        """list_task_graph_logs  # noqa: E501

        Fetch the task graph logs of a namespace the user has access to. The returned entries will include only summary data, and will not include information about the individual tasks that were executed. (This information is available when requesting an individual task graph log.) Entries in the response are ordered from newest to oldest. Pagination parameters work as in other API methods; see PaginationMetadata.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_task_graph_logs(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            namespace (str): Include logs for this namespace.. [optional]
            created_by (str): Include logs from only this user.. [optional]
            search (str): search string that will look at name.. [optional]
            start_time (datetime): Include logs created after this time.. [optional]
            end_time (datetime): Include logs created before this time.. [optional]
            page (int): pagination offset. [optional]
            per_page (int): pagination limit. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TaskGraphLogsData
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        return self.list_task_graph_logs_endpoint.call_with_http_info(**kwargs)

    def report_client_node(self, namespace, id, report, **kwargs):
        """report_client_node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.report_client_node(namespace, id, report, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): The namespace that owns this task graph log.
            id (str): The UUID of the task graph log entry.
            report (TaskGraphClientNodeStatus): The node status to report.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["id"] = id
        kwargs["report"] = report
        return self.report_client_node_endpoint.call_with_http_info(**kwargs)

    def update_task_graph_log(self, namespace, id, log, **kwargs):
        """update_task_graph_log  # noqa: E501

        Update information about a single task graph execution.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_task_graph_log(namespace, id, log, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): The namespace that owns this task graph log.
            id (str): The UUID of the task graph log entry.
            log (TaskGraphLog): Updates to make to the task graph log. The only manual update that a client should need to make to a task graph log is to update its completion status to `succeeded`, `failed`, or `cancelled`.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["id"] = id
        kwargs["log"] = log
        return self.update_task_graph_log_endpoint.call_with_http_info(**kwargs)
