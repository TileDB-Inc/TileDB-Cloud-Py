"""
    TileDB Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 2.2.19
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from tiledb.cloud.rest_api.api_client import ApiClient
from tiledb.cloud.rest_api.api_client import Endpoint as _Endpoint
from tiledb.cloud.rest_api.model.aws_access_credentials import AWSAccessCredentials
from tiledb.cloud.rest_api.model.error import Error
from tiledb.cloud.rest_api.model.organization import Organization
from tiledb.cloud.rest_api.model.organization_user import OrganizationUser
from tiledb.cloud.rest_api.model_utils import check_allowed_values  # noqa: F401
from tiledb.cloud.rest_api.model_utils import check_validations
from tiledb.cloud.rest_api.model_utils import date
from tiledb.cloud.rest_api.model_utils import datetime
from tiledb.cloud.rest_api.model_utils import file_type
from tiledb.cloud.rest_api.model_utils import none_type
from tiledb.cloud.rest_api.model_utils import validate_and_convert_types


class OrganizationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_aws_access_credentials_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/credentials/{namespace}/aws",
                "operation_id": "add_aws_access_credentials",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "aws_access_credentials",
                ],
                "required": [
                    "namespace",
                    "aws_access_credentials",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "aws_access_credentials": (AWSAccessCredentials,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                },
                "location_map": {
                    "namespace": "path",
                    "aws_access_credentials": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.add_user_to_organization_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/organizations/{organization}/user",
                "operation_id": "add_user_to_organization",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "organization",
                    "user",
                ],
                "required": [
                    "organization",
                    "user",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "organization": (str,),
                    "user": (OrganizationUser,),
                },
                "attribute_map": {
                    "organization": "organization",
                },
                "location_map": {
                    "organization": "path",
                    "user": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.check_aws_access_credentials_endpoint = _Endpoint(
            settings={
                "response_type": ([AWSAccessCredentials],),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/credentials/{namespace}/aws",
                "operation_id": "check_aws_access_credentials",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                ],
                "required": [
                    "namespace",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                },
                "location_map": {
                    "namespace": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.check_aws_access_credentials_by_name_endpoint = _Endpoint(
            settings={
                "response_type": (AWSAccessCredentials,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/credentials/{namespace}/aws/{name}",
                "operation_id": "check_aws_access_credentials_by_name",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "name",
                ],
                "required": [
                    "namespace",
                    "name",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "name": (str,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "name": "name",
                },
                "location_map": {
                    "namespace": "path",
                    "name": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.create_organization_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/organization",
                "operation_id": "create_organization",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "organization",
                ],
                "required": [
                    "organization",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "organization": (Organization,),
                },
                "attribute_map": {},
                "location_map": {
                    "organization": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.delete_aws_access_credentials_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/credentials/{namespace}/aws/{name}",
                "operation_id": "delete_aws_access_credentials",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "name",
                ],
                "required": [
                    "namespace",
                    "name",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "name": (str,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "name": "name",
                },
                "location_map": {
                    "namespace": "path",
                    "name": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.delete_organization_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/organizations/{organization}",
                "operation_id": "delete_organization",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "organization",
                ],
                "required": [
                    "organization",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "organization": (str,),
                },
                "attribute_map": {
                    "organization": "organization",
                },
                "location_map": {
                    "organization": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.delete_user_from_organization_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/organizations/{organization}/{username}",
                "operation_id": "delete_user_from_organization",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "organization",
                    "username",
                ],
                "required": [
                    "organization",
                    "username",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "organization": (str,),
                    "username": (str,),
                },
                "attribute_map": {
                    "organization": "organization",
                    "username": "username",
                },
                "location_map": {
                    "organization": "path",
                    "username": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_all_organizations_endpoint = _Endpoint(
            settings={
                "response_type": ([Organization],),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/organizations",
                "operation_id": "get_all_organizations",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {},
                "attribute_map": {},
                "location_map": {},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_organization_endpoint = _Endpoint(
            settings={
                "response_type": (Organization,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/organizations/{organization}",
                "operation_id": "get_organization",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "organization",
                ],
                "required": [
                    "organization",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "organization": (str,),
                },
                "attribute_map": {
                    "organization": "organization",
                },
                "location_map": {
                    "organization": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_organization_user_endpoint = _Endpoint(
            settings={
                "response_type": (OrganizationUser,),
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/organizations/{organization}/{username}",
                "operation_id": "get_organization_user",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "organization",
                    "username",
                ],
                "required": [
                    "organization",
                    "username",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "organization": (str,),
                    "username": (str,),
                },
                "attribute_map": {
                    "organization": "organization",
                    "username": "username",
                },
                "location_map": {
                    "organization": "path",
                    "username": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.update_aws_access_credentials_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/credentials/{namespace}/aws/{name}",
                "operation_id": "update_aws_access_credentials",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "namespace",
                    "name",
                    "aws_access_credentials",
                ],
                "required": [
                    "namespace",
                    "name",
                    "aws_access_credentials",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "namespace": (str,),
                    "name": (str,),
                    "aws_access_credentials": (AWSAccessCredentials,),
                },
                "attribute_map": {
                    "namespace": "namespace",
                    "name": "name",
                },
                "location_map": {
                    "namespace": "path",
                    "name": "path",
                    "aws_access_credentials": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.update_organization_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/organizations/{organization}",
                "operation_id": "update_organization",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "organization",
                    "organization_details",
                ],
                "required": [
                    "organization",
                    "organization_details",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "organization": (str,),
                    "organization_details": (Organization,),
                },
                "attribute_map": {
                    "organization": "organization",
                },
                "location_map": {
                    "organization": "path",
                    "organization_details": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.update_user_in_organization_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["ApiKeyAuth", "BasicAuth"],
                "endpoint_path": "/organizations/{organization}/{username}",
                "operation_id": "update_user_in_organization",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "organization",
                    "username",
                    "user",
                ],
                "required": [
                    "organization",
                    "username",
                    "user",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "organization": (str,),
                    "username": (str,),
                    "user": (OrganizationUser,),
                },
                "attribute_map": {
                    "organization": "organization",
                    "username": "username",
                },
                "location_map": {
                    "organization": "path",
                    "username": "path",
                    "user": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )

    def add_aws_access_credentials(self, namespace, aws_access_credentials, **kwargs):
        """add_aws_access_credentials  # noqa: E501

        Add aws keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_aws_access_credentials(namespace, aws_access_credentials, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace
            aws_access_credentials (AWSAccessCredentials): aws access credentials to store for a namespace

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["aws_access_credentials"] = aws_access_credentials
        return self.add_aws_access_credentials_endpoint.call_with_http_info(**kwargs)

    def add_user_to_organization(self, organization, user, **kwargs):
        """add_user_to_organization  # noqa: E501

        add a user to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_user_to_organization(organization, user, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): organization name
            user (OrganizationUser): user to add

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["organization"] = organization
        kwargs["user"] = user
        return self.add_user_to_organization_endpoint.call_with_http_info(**kwargs)

    def check_aws_access_credentials(self, namespace, **kwargs):
        """check_aws_access_credentials  # noqa: E501

        Check if aws keys are set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_aws_access_credentials(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [AWSAccessCredentials]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        return self.check_aws_access_credentials_endpoint.call_with_http_info(**kwargs)

    def check_aws_access_credentials_by_name(self, namespace, name, **kwargs):
        """check_aws_access_credentials_by_name  # noqa: E501

        Check if aws keys are set by name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_aws_access_credentials_by_name(namespace, name, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace
            name (str): name

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AWSAccessCredentials
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["name"] = name
        return self.check_aws_access_credentials_by_name_endpoint.call_with_http_info(
            **kwargs
        )

    def create_organization(self, organization, **kwargs):
        """create_organization  # noqa: E501

        create a organization, the user creating will be listed as owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_organization(organization, async_req=True)
        >>> result = thread.get()

        Args:
            organization (Organization): organization to create

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["organization"] = organization
        return self.create_organization_endpoint.call_with_http_info(**kwargs)

    def delete_aws_access_credentials(self, namespace, name, **kwargs):
        """delete_aws_access_credentials  # noqa: E501

        delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_aws_access_credentials(namespace, name, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace
            name (str): name

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["name"] = name
        return self.delete_aws_access_credentials_endpoint.call_with_http_info(**kwargs)

    def delete_organization(self, organization, **kwargs):
        """delete_organization  # noqa: E501

        delete a organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_organization(organization, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): organization name or ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["organization"] = organization
        return self.delete_organization_endpoint.call_with_http_info(**kwargs)

    def delete_user_from_organization(self, organization, username, **kwargs):
        """delete_user_from_organization  # noqa: E501

        delete a user from an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_user_from_organization(organization, username, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): organization name
            username (str): username to manipulate

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["organization"] = organization
        kwargs["username"] = username
        return self.delete_user_from_organization_endpoint.call_with_http_info(**kwargs)

    def get_all_organizations(self, **kwargs):
        """get_all_organizations  # noqa: E501

        get all organizations that the user is member of  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_organizations(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Organization]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        return self.get_all_organizations_endpoint.call_with_http_info(**kwargs)

    def get_organization(self, organization, **kwargs):
        """get_organization  # noqa: E501

        get a organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organization(organization, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): organization name or ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Organization
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["organization"] = organization
        return self.get_organization_endpoint.call_with_http_info(**kwargs)

    def get_organization_user(self, organization, username, **kwargs):
        """get_organization_user  # noqa: E501

        get a user from an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organization_user(organization, username, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): organization name
            username (str): username to manipulate

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            OrganizationUser
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["organization"] = organization
        kwargs["username"] = username
        return self.get_organization_user_endpoint.call_with_http_info(**kwargs)

    def update_aws_access_credentials(
        self, namespace, name, aws_access_credentials, **kwargs
    ):
        """update_aws_access_credentials  # noqa: E501

        Update aws keys or associated buckets. This will update the key associations for each array in the namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_aws_access_credentials(namespace, name, aws_access_credentials, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): namespace
            name (str): name
            aws_access_credentials (AWSAccessCredentials): aws credentials to update

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["namespace"] = namespace
        kwargs["name"] = name
        kwargs["aws_access_credentials"] = aws_access_credentials
        return self.update_aws_access_credentials_endpoint.call_with_http_info(**kwargs)

    def update_organization(self, organization, organization_details, **kwargs):
        """update_organization  # noqa: E501

        update a organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_organization(organization, organization_details, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): organization name or ID
            organization_details (Organization): organization details to update

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["organization"] = organization
        kwargs["organization_details"] = organization_details
        return self.update_organization_endpoint.call_with_http_info(**kwargs)

    def update_user_in_organization(self, organization, username, user, **kwargs):
        """update_user_in_organization  # noqa: E501

        update a user in an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_user_in_organization(organization, username, user, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): organization name
            username (str): username to manipulate
            user (OrganizationUser): user details to update

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["organization"] = organization
        kwargs["username"] = username
        kwargs["user"] = user
        return self.update_user_in_organization_endpoint.call_with_http_info(**kwargs)
