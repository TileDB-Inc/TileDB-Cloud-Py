"""
    TileDB Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 2.2.19
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from tiledb.cloud.rest_api.exceptions import ApiAttributeError
from tiledb.cloud.rest_api.model_utils import ApiTypeError  # noqa: F401
from tiledb.cloud.rest_api.model_utils import ModelComposed
from tiledb.cloud.rest_api.model_utils import ModelNormal
from tiledb.cloud.rest_api.model_utils import ModelSimple
from tiledb.cloud.rest_api.model_utils import cached_property
from tiledb.cloud.rest_api.model_utils import change_keys_js_to_python
from tiledb.cloud.rest_api.model_utils import convert_js_args_to_python_args
from tiledb.cloud.rest_api.model_utils import date
from tiledb.cloud.rest_api.model_utils import datetime
from tiledb.cloud.rest_api.model_utils import file_type
from tiledb.cloud.rest_api.model_utils import none_type
from tiledb.cloud.rest_api.model_utils import validate_get_composed_info

from ..model_utils import OpenApiModel


def lazy_import():
    from tiledb.cloud.rest_api.model.query_ranges import QueryRanges
    from tiledb.cloud.rest_api.model.result_format import ResultFormat
    from tiledb.cloud.rest_api.model.tgudf_argument import TGUDFArgument
    from tiledb.cloud.rest_api.model.udf_array_details import UDFArrayDetails
    from tiledb.cloud.rest_api.model.udf_language import UDFLanguage
    from tiledb.cloud.rest_api.model.udf_subarray import UDFSubarray

    globals()["QueryRanges"] = QueryRanges
    globals()["ResultFormat"] = ResultFormat
    globals()["TGUDFArgument"] = TGUDFArgument
    globals()["UDFArrayDetails"] = UDFArrayDetails
    globals()["UDFLanguage"] = UDFLanguage
    globals()["UDFSubarray"] = UDFSubarray


class MultiArrayUDF(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {}

    validations = {}

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (
            bool,
            date,
            datetime,
            dict,
            float,
            int,
            list,
            str,
            none_type,
        )  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            "udf_info_name": (str,),  # noqa: E501
            "language": (UDFLanguage,),  # noqa: E501
            "version": (str,),  # noqa: E501
            "image_name": (str,),  # noqa: E501
            "resource_class": (str,),  # noqa: E501
            "_exec": (str,),  # noqa: E501
            "exec_raw": (str,),  # noqa: E501
            "result_format": (ResultFormat,),  # noqa: E501
            "task_name": (str,),  # noqa: E501
            "argument": (str,),  # noqa: E501
            "arguments_json": (
                [TGUDFArgument],
                none_type,
            ),  # noqa: E501
            "stored_param_uuids": ([str],),  # noqa: E501
            "store_results": (bool,),  # noqa: E501
            "dont_download_results": (bool,),  # noqa: E501
            "ranges": (QueryRanges,),  # noqa: E501
            "subarray": (UDFSubarray,),  # noqa: E501
            "buffers": ([str],),  # noqa: E501
            "arrays": ([UDFArrayDetails],),  # noqa: E501
            "timeout": (int,),  # noqa: E501
            "task_graph_uuid": (str,),  # noqa: E501
            "client_node_uuid": (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None

    attribute_map = {
        "udf_info_name": "udf_info_name",  # noqa: E501
        "language": "language",  # noqa: E501
        "version": "version",  # noqa: E501
        "image_name": "image_name",  # noqa: E501
        "resource_class": "resource_class",  # noqa: E501
        "_exec": "exec",  # noqa: E501
        "exec_raw": "exec_raw",  # noqa: E501
        "result_format": "result_format",  # noqa: E501
        "task_name": "task_name",  # noqa: E501
        "argument": "argument",  # noqa: E501
        "arguments_json": "arguments_json",  # noqa: E501
        "stored_param_uuids": "stored_param_uuids",  # noqa: E501
        "store_results": "store_results",  # noqa: E501
        "dont_download_results": "dont_download_results",  # noqa: E501
        "ranges": "ranges",  # noqa: E501
        "subarray": "subarray",  # noqa: E501
        "buffers": "buffers",  # noqa: E501
        "arrays": "arrays",  # noqa: E501
        "timeout": "timeout",  # noqa: E501
        "task_graph_uuid": "task_graph_uuid",  # noqa: E501
        "client_node_uuid": "client_node_uuid",  # noqa: E501
    }

    read_only_vars = {}

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """MultiArrayUDF - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            udf_info_name (str): name of UDFInfo to run, format is {namespace}/{udf_name}. Can not be used with exec. [optional]  # noqa: E501
            language (UDFLanguage): [optional]  # noqa: E501
            version (str): Type-specific version. [optional]  # noqa: E501
            image_name (str): Docker image name to use for UDF. [optional]  # noqa: E501
            resource_class (str): The resource class to use for the UDF execution. Resource classes define resource limits for memory and CPUs. If this is empty, then the UDF will execute in the standard resource class of the TileDB Cloud provider. . [optional]  # noqa: E501
            _exec (str): Type-specific executable text. [optional]  # noqa: E501
            exec_raw (str): optional raw text to store of serialized function, used for showing in UI. [optional]  # noqa: E501
            result_format (ResultFormat): [optional]  # noqa: E501
            task_name (str): name of task, optional. [optional]  # noqa: E501
            argument (str): Deprecated: Prefer to use `argument_json` instead. Argument(s) to pass to UDF function, tuple or list of args/kwargs which can be in native or JSON format . [optional]  # noqa: E501
            arguments_json ([TGUDFArgument], none_type): A series of key-value pairs to be passed as arguments into the UDF. See `TGUDFNodeData.arguments` for more information. If this format is used to pass arguments, arrays will be passed into the UDF as specified by the Node placeholders passed in here, rather than the classic method of putting all array arguments in the first parameter. Either this or `argument` should be set. . [optional]  # noqa: E501
            stored_param_uuids ([str]): The UUIDs of stored input parameters (passed in a language-specific format within \"argument\") to be retrieved from the server-side cache. Serialized in standard hex format with no {}.. [optional]  # noqa: E501
            store_results (bool): store results for later retrieval. [optional]  # noqa: E501
            dont_download_results (bool): Set to true to avoid downloading the results of this UDF. Useful for intermediate nodes in a task graph where you will not be using the results of your function. Defaults to false (\"yes download results\").. [optional]  # noqa: E501
            ranges (QueryRanges): [optional]  # noqa: E501
            subarray (UDFSubarray): [optional]  # noqa: E501
            buffers ([str]): List of buffers to fetch (attributes + dimensions). Deprecated; please set arrays with `UDFArrayDetails`.. [optional]  # noqa: E501
            arrays ([UDFArrayDetails]): Array ranges/buffer into to run UDF on. [optional]  # noqa: E501
            timeout (int): UDF-type timeout in seconds (default: 900). [optional]  # noqa: E501
            task_graph_uuid (str): If set, the ID of the log for the task graph that this was part of. . [optional]  # noqa: E501
            client_node_uuid (str): If set, the client-defined ID of the node within this task's graph. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if (
                var_name not in self.attribute_map
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self.additional_properties_type is None
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set(
        [
            "_data_store",
            "_check_type",
            "_spec_property_naming",
            "_path_to_item",
            "_configuration",
            "_visited_composed_classes",
        ]
    )

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """MultiArrayUDF - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            udf_info_name (str): name of UDFInfo to run, format is {namespace}/{udf_name}. Can not be used with exec. [optional]  # noqa: E501
            language (UDFLanguage): [optional]  # noqa: E501
            version (str): Type-specific version. [optional]  # noqa: E501
            image_name (str): Docker image name to use for UDF. [optional]  # noqa: E501
            resource_class (str): The resource class to use for the UDF execution. Resource classes define resource limits for memory and CPUs. If this is empty, then the UDF will execute in the standard resource class of the TileDB Cloud provider. . [optional]  # noqa: E501
            _exec (str): Type-specific executable text. [optional]  # noqa: E501
            exec_raw (str): optional raw text to store of serialized function, used for showing in UI. [optional]  # noqa: E501
            result_format (ResultFormat): [optional]  # noqa: E501
            task_name (str): name of task, optional. [optional]  # noqa: E501
            argument (str): Deprecated: Prefer to use `argument_json` instead. Argument(s) to pass to UDF function, tuple or list of args/kwargs which can be in native or JSON format . [optional]  # noqa: E501
            arguments_json ([TGUDFArgument], none_type): A series of key-value pairs to be passed as arguments into the UDF. See `TGUDFNodeData.arguments` for more information. If this format is used to pass arguments, arrays will be passed into the UDF as specified by the Node placeholders passed in here, rather than the classic method of putting all array arguments in the first parameter. Either this or `argument` should be set. . [optional]  # noqa: E501
            stored_param_uuids ([str]): The UUIDs of stored input parameters (passed in a language-specific format within \"argument\") to be retrieved from the server-side cache. Serialized in standard hex format with no {}.. [optional]  # noqa: E501
            store_results (bool): store results for later retrieval. [optional]  # noqa: E501
            dont_download_results (bool): Set to true to avoid downloading the results of this UDF. Useful for intermediate nodes in a task graph where you will not be using the results of your function. Defaults to false (\"yes download results\").. [optional]  # noqa: E501
            ranges (QueryRanges): [optional]  # noqa: E501
            subarray (UDFSubarray): [optional]  # noqa: E501
            buffers ([str]): List of buffers to fetch (attributes + dimensions). Deprecated; please set arrays with `UDFArrayDetails`.. [optional]  # noqa: E501
            arrays ([UDFArrayDetails]): Array ranges/buffer into to run UDF on. [optional]  # noqa: E501
            timeout (int): UDF-type timeout in seconds (default: 900). [optional]  # noqa: E501
            task_graph_uuid (str): If set, the ID of the log for the task graph that this was part of. . [optional]  # noqa: E501
            client_node_uuid (str): If set, the client-defined ID of the node within this task's graph. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if (
                var_name not in self.attribute_map
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self.additional_properties_type is None
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(
                    f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                    f"class with read only attributes."
                )
