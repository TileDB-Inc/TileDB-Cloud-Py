"""
    TileDB Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 2.2.19
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from tiledb.cloud.rest_api.exceptions import ApiAttributeError
from tiledb.cloud.rest_api.model_utils import ApiTypeError  # noqa: F401
from tiledb.cloud.rest_api.model_utils import ModelComposed
from tiledb.cloud.rest_api.model_utils import ModelNormal
from tiledb.cloud.rest_api.model_utils import ModelSimple
from tiledb.cloud.rest_api.model_utils import cached_property
from tiledb.cloud.rest_api.model_utils import change_keys_js_to_python
from tiledb.cloud.rest_api.model_utils import convert_js_args_to_python_args
from tiledb.cloud.rest_api.model_utils import date
from tiledb.cloud.rest_api.model_utils import datetime
from tiledb.cloud.rest_api.model_utils import file_type
from tiledb.cloud.rest_api.model_utils import none_type
from tiledb.cloud.rest_api.model_utils import validate_get_composed_info

from ..model_utils import OpenApiModel


def lazy_import():
    from tiledb.cloud.rest_api.model.array_activity_log import ArrayActivityLog
    from tiledb.cloud.rest_api.model.array_info import ArrayInfo
    from tiledb.cloud.rest_api.model.array_task_status import ArrayTaskStatus
    from tiledb.cloud.rest_api.model.array_task_type import ArrayTaskType
    from tiledb.cloud.rest_api.model.domain_array import DomainArray
    from tiledb.cloud.rest_api.model.querytype import Querytype
    from tiledb.cloud.rest_api.model.result_format import ResultFormat

    globals()["ArrayActivityLog"] = ArrayActivityLog
    globals()["ArrayInfo"] = ArrayInfo
    globals()["ArrayTaskStatus"] = ArrayTaskStatus
    globals()["ArrayTaskType"] = ArrayTaskType
    globals()["DomainArray"] = DomainArray
    globals()["Querytype"] = Querytype
    globals()["ResultFormat"] = ResultFormat


class ArrayTask(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {}

    validations = {}

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (
            bool,
            date,
            datetime,
            dict,
            float,
            int,
            list,
            str,
            none_type,
        )  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            "id": (str,),  # noqa: E501
            "name": (str,),  # noqa: E501
            "description": (str,),  # noqa: E501
            "array_metadata": (ArrayInfo,),  # noqa: E501
            "subarray": (DomainArray,),  # noqa: E501
            "memory": (int,),  # noqa: E501
            "cpu": (int,),  # noqa: E501
            "namespace": (str,),  # noqa: E501
            "status": (ArrayTaskStatus,),  # noqa: E501
            "start_time": (datetime,),  # noqa: E501
            "finish_time": (
                datetime,
                none_type,
            ),  # noqa: E501
            "cost": (float,),  # noqa: E501
            "egress_cost": (float,),  # noqa: E501
            "access_cost": (float,),  # noqa: E501
            "query_type": (Querytype,),  # noqa: E501
            "udf_code": (str,),  # noqa: E501
            "udf_language": (str,),  # noqa: E501
            "sql_query": (str,),  # noqa: E501
            "type": (ArrayTaskType,),  # noqa: E501
            "activity": ([ArrayActivityLog],),  # noqa: E501
            "logs": (str,),  # noqa: E501
            "duration": (float,),  # noqa: E501
            "sql_init_commands": ([str],),  # noqa: E501
            "sql_parameters": (
                [bool, date, datetime, dict, float, int, list, str, none_type],
            ),  # noqa: E501
            "result_format": (ResultFormat,),  # noqa: E501
            "task_graph_uuid": (str,),  # noqa: E501
            "client_node_uuid": (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None

    attribute_map = {
        "id": "id",  # noqa: E501
        "name": "name",  # noqa: E501
        "description": "description",  # noqa: E501
        "array_metadata": "array_metadata",  # noqa: E501
        "subarray": "subarray",  # noqa: E501
        "memory": "memory",  # noqa: E501
        "cpu": "cpu",  # noqa: E501
        "namespace": "namespace",  # noqa: E501
        "status": "status",  # noqa: E501
        "start_time": "start_time",  # noqa: E501
        "finish_time": "finish_time",  # noqa: E501
        "cost": "cost",  # noqa: E501
        "egress_cost": "egress_cost",  # noqa: E501
        "access_cost": "access_cost",  # noqa: E501
        "query_type": "query_type",  # noqa: E501
        "udf_code": "udf_code",  # noqa: E501
        "udf_language": "udf_language",  # noqa: E501
        "sql_query": "sql_query",  # noqa: E501
        "type": "type",  # noqa: E501
        "activity": "activity",  # noqa: E501
        "logs": "logs",  # noqa: E501
        "duration": "duration",  # noqa: E501
        "sql_init_commands": "sql_init_commands",  # noqa: E501
        "sql_parameters": "sql_parameters",  # noqa: E501
        "result_format": "result_format",  # noqa: E501
        "task_graph_uuid": "task_graph_uuid",  # noqa: E501
        "client_node_uuid": "client_node_uuid",  # noqa: E501
    }

    read_only_vars = {}

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ArrayTask - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): task ID. [optional]  # noqa: E501
            name (str): Optional task name. [optional]  # noqa: E501
            description (str): Optional task description (Tasks purpose). [optional]  # noqa: E501
            array_metadata (ArrayInfo): [optional]  # noqa: E501
            subarray (DomainArray): [optional]  # noqa: E501
            memory (int): memory allocated to task in bytes. [optional]  # noqa: E501
            cpu (int): millicpu allocated to task. [optional]  # noqa: E501
            namespace (str): namespace task is tied to. [optional]  # noqa: E501
            status (ArrayTaskStatus): [optional]  # noqa: E501
            start_time (datetime): Start time RFC3339 for job. [optional]  # noqa: E501
            finish_time (datetime, none_type): Finish time RFC3339 for job. [optional]  # noqa: E501
            cost (float): Total accumulated for task in USD, example is $0.12. [optional]  # noqa: E501
            egress_cost (float): Total accumulated for egress task in USD, example is $0.12. [optional]  # noqa: E501
            access_cost (float): Cost accumulated for access task in USD, example is $0.12. [optional]  # noqa: E501
            query_type (Querytype): [optional]  # noqa: E501
            udf_code (str): Optional actual code that is going to be executed. [optional]  # noqa: E501
            udf_language (str): Optional actual language used to express udf_code. [optional]  # noqa: E501
            sql_query (str): Optional actual sql query that is going to be executed. [optional]  # noqa: E501
            type (ArrayTaskType): [optional]  # noqa: E501
            activity ([ArrayActivityLog]): Array activity logs for task. [optional]  # noqa: E501
            logs (str): logs from array task. [optional]  # noqa: E501
            duration (float): duration in nanoseconds of an array task. [optional]  # noqa: E501
            sql_init_commands ([str]): SQL queries or commands to run before main sql query. [optional]  # noqa: E501
            sql_parameters ([bool, date, datetime, dict, float, int, list, str, none_type]): SQL query parameters. [optional]  # noqa: E501
            result_format (ResultFormat): [optional]  # noqa: E501
            task_graph_uuid (str): If set, the ID of the log for the task graph that this was part of. . [optional]  # noqa: E501
            client_node_uuid (str): If set, the client-defined ID of the node within this task's graph. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if (
                var_name not in self.attribute_map
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self.additional_properties_type is None
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set(
        [
            "_data_store",
            "_check_type",
            "_spec_property_naming",
            "_path_to_item",
            "_configuration",
            "_visited_composed_classes",
        ]
    )

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ArrayTask - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): task ID. [optional]  # noqa: E501
            name (str): Optional task name. [optional]  # noqa: E501
            description (str): Optional task description (Tasks purpose). [optional]  # noqa: E501
            array_metadata (ArrayInfo): [optional]  # noqa: E501
            subarray (DomainArray): [optional]  # noqa: E501
            memory (int): memory allocated to task in bytes. [optional]  # noqa: E501
            cpu (int): millicpu allocated to task. [optional]  # noqa: E501
            namespace (str): namespace task is tied to. [optional]  # noqa: E501
            status (ArrayTaskStatus): [optional]  # noqa: E501
            start_time (datetime): Start time RFC3339 for job. [optional]  # noqa: E501
            finish_time (datetime, none_type): Finish time RFC3339 for job. [optional]  # noqa: E501
            cost (float): Total accumulated for task in USD, example is $0.12. [optional]  # noqa: E501
            egress_cost (float): Total accumulated for egress task in USD, example is $0.12. [optional]  # noqa: E501
            access_cost (float): Cost accumulated for access task in USD, example is $0.12. [optional]  # noqa: E501
            query_type (Querytype): [optional]  # noqa: E501
            udf_code (str): Optional actual code that is going to be executed. [optional]  # noqa: E501
            udf_language (str): Optional actual language used to express udf_code. [optional]  # noqa: E501
            sql_query (str): Optional actual sql query that is going to be executed. [optional]  # noqa: E501
            type (ArrayTaskType): [optional]  # noqa: E501
            activity ([ArrayActivityLog]): Array activity logs for task. [optional]  # noqa: E501
            logs (str): logs from array task. [optional]  # noqa: E501
            duration (float): duration in nanoseconds of an array task. [optional]  # noqa: E501
            sql_init_commands ([str]): SQL queries or commands to run before main sql query. [optional]  # noqa: E501
            sql_parameters ([bool, date, datetime, dict, float, int, list, str, none_type]): SQL query parameters. [optional]  # noqa: E501
            result_format (ResultFormat): [optional]  # noqa: E501
            task_graph_uuid (str): If set, the ID of the log for the task graph that this was part of. . [optional]  # noqa: E501
            client_node_uuid (str): If set, the client-defined ID of the node within this task's graph. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if (
                var_name not in self.attribute_map
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self.additional_properties_type is None
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(
                    f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                    f"class with read only attributes."
                )
