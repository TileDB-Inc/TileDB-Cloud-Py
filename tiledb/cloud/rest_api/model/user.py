"""
    TileDB Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 2.2.19
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from tiledb.cloud.rest_api.exceptions import ApiAttributeError
from tiledb.cloud.rest_api.model_utils import ApiTypeError  # noqa: F401
from tiledb.cloud.rest_api.model_utils import ModelComposed
from tiledb.cloud.rest_api.model_utils import ModelNormal
from tiledb.cloud.rest_api.model_utils import ModelSimple
from tiledb.cloud.rest_api.model_utils import cached_property
from tiledb.cloud.rest_api.model_utils import change_keys_js_to_python
from tiledb.cloud.rest_api.model_utils import convert_js_args_to_python_args
from tiledb.cloud.rest_api.model_utils import date
from tiledb.cloud.rest_api.model_utils import datetime
from tiledb.cloud.rest_api.model_utils import file_type
from tiledb.cloud.rest_api.model_utils import none_type
from tiledb.cloud.rest_api.model_utils import validate_get_composed_info

from ..model_utils import OpenApiModel


def lazy_import():
    from tiledb.cloud.rest_api.model.namespace_actions import NamespaceActions
    from tiledb.cloud.rest_api.model.organization_user import OrganizationUser

    globals()["NamespaceActions"] = NamespaceActions
    globals()["OrganizationUser"] = OrganizationUser


class User(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {}

    validations = {
        ("username",): {
            "max_length": 63,
            "min_length": 1,
            "regex": {
                "pattern": r"^[\w.\-]+$",  # noqa: E501
            },
        },
        ("password",): {
            "min_length": 8,
        },
        ("name",): {
            "min_length": 1,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (
            bool,
            date,
            datetime,
            dict,
            float,
            int,
            list,
            str,
            none_type,
        )  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            "username": (str,),  # noqa: E501
            "id": (str,),  # noqa: E501
            "password": (str,),  # noqa: E501
            "name": (str,),  # noqa: E501
            "email": (str,),  # noqa: E501
            "is_valid_email": (bool,),  # noqa: E501
            "stripe_connect": (bool,),  # noqa: E501
            "company": (str,),  # noqa: E501
            "logo": (str,),  # noqa: E501
            "last_activity_date": (datetime,),  # noqa: E501
            "timezone": (str,),  # noqa: E501
            "organizations": ([OrganizationUser],),  # noqa: E501
            "allowed_actions": ([NamespaceActions],),  # noqa: E501
            "enabled_features": ([str],),  # noqa: E501
            "unpaid_subscription": (bool,),  # noqa: E501
            "default_s3_path": (str,),  # noqa: E501
            "default_s3_path_credentials_name": (str,),  # noqa: E501
            "default_namespace_charged": (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None

    attribute_map = {
        "username": "username",  # noqa: E501
        "id": "id",  # noqa: E501
        "password": "password",  # noqa: E501
        "name": "name",  # noqa: E501
        "email": "email",  # noqa: E501
        "is_valid_email": "is_valid_email",  # noqa: E501
        "stripe_connect": "stripe_connect",  # noqa: E501
        "company": "company",  # noqa: E501
        "logo": "logo",  # noqa: E501
        "last_activity_date": "last_activity_date",  # noqa: E501
        "timezone": "timezone",  # noqa: E501
        "organizations": "organizations",  # noqa: E501
        "allowed_actions": "allowed_actions",  # noqa: E501
        "enabled_features": "enabled_features",  # noqa: E501
        "unpaid_subscription": "unpaid_subscription",  # noqa: E501
        "default_s3_path": "default_s3_path",  # noqa: E501
        "default_s3_path_credentials_name": "default_s3_path_credentials_name",  # noqa: E501
        "default_namespace_charged": "default_namespace_charged",  # noqa: E501
    }

    read_only_vars = {
        "is_valid_email",  # noqa: E501
        "stripe_connect",  # noqa: E501
        "last_activity_date",  # noqa: E501
        "organizations",  # noqa: E501
        "enabled_features",  # noqa: E501
        "unpaid_subscription",  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, username, *args, **kwargs):  # noqa: E501
        """User - a model defined in OpenAPI

        Args:
            username (str): username must be unique

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): unique ID of user. [optional]  # noqa: E501
            password (str): password. [optional]  # noqa: E501
            name (str): the user's full, real name. [optional]  # noqa: E501
            email (str): the user's email. [optional]  # noqa: E501
            is_valid_email (bool): user's email is validated to be correct. [optional]  # noqa: E501
            stripe_connect (bool): Denotes that the user is able to apply pricing to arrays by means of Stripe Connect. [optional]  # noqa: E501
            company (str): the user's company. [optional]  # noqa: E501
            logo (str): the user's logo. [optional]  # noqa: E501
            last_activity_date (datetime): when the user last logged in (set by the server). [optional]  # noqa: E501
            timezone (str): [optional]  # noqa: E501
            organizations ([OrganizationUser]): Array of organizations a user is part of and their roles. [optional]  # noqa: E501
            allowed_actions ([NamespaceActions]): list of actions user is allowed to do on this organization. [optional]  # noqa: E501
            enabled_features ([str]): List of extra/optional/beta features to enable for namespace. [optional]  # noqa: E501
            unpaid_subscription (bool): A notice that the user has an unpaid subscription. [optional]  # noqa: E501
            default_s3_path (str): default S3 path to store newly created notebooks. [optional]  # noqa: E501
            default_s3_path_credentials_name (str): Default S3 path credentials name is the credentials name to use along with default_s3_path. [optional]  # noqa: E501
            default_namespace_charged (str): Override the default namespace charged for actions when no namespace is specified. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.username = username
        for var_name, var_value in kwargs.items():
            if (
                var_name not in self.attribute_map
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self.additional_properties_type is None
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set(
        [
            "_data_store",
            "_check_type",
            "_spec_property_naming",
            "_path_to_item",
            "_configuration",
            "_visited_composed_classes",
        ]
    )

    @convert_js_args_to_python_args
    def __init__(self, username, *args, **kwargs):  # noqa: E501
        """User - a model defined in OpenAPI

        Args:
            username (str): username must be unique

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): unique ID of user. [optional]  # noqa: E501
            password (str): password. [optional]  # noqa: E501
            name (str): the user's full, real name. [optional]  # noqa: E501
            email (str): the user's email. [optional]  # noqa: E501
            is_valid_email (bool): user's email is validated to be correct. [optional]  # noqa: E501
            stripe_connect (bool): Denotes that the user is able to apply pricing to arrays by means of Stripe Connect. [optional]  # noqa: E501
            company (str): the user's company. [optional]  # noqa: E501
            logo (str): the user's logo. [optional]  # noqa: E501
            last_activity_date (datetime): when the user last logged in (set by the server). [optional]  # noqa: E501
            timezone (str): [optional]  # noqa: E501
            organizations ([OrganizationUser]): Array of organizations a user is part of and their roles. [optional]  # noqa: E501
            allowed_actions ([NamespaceActions]): list of actions user is allowed to do on this organization. [optional]  # noqa: E501
            enabled_features ([str]): List of extra/optional/beta features to enable for namespace. [optional]  # noqa: E501
            unpaid_subscription (bool): A notice that the user has an unpaid subscription. [optional]  # noqa: E501
            default_s3_path (str): default S3 path to store newly created notebooks. [optional]  # noqa: E501
            default_s3_path_credentials_name (str): Default S3 path credentials name is the credentials name to use along with default_s3_path. [optional]  # noqa: E501
            default_namespace_charged (str): Override the default namespace charged for actions when no namespace is specified. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.username = username
        for var_name, var_value in kwargs.items():
            if (
                var_name not in self.attribute_map
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self.additional_properties_type is None
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(
                    f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                    f"class with read only attributes."
                )
