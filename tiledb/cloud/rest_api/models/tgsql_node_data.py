# coding: utf-8

"""
    TileDB Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 2.2.19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.cloud.rest_api.configuration import Configuration


class TGSQLNodeData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "init_commands": "list[str]",
        "query": "str",
        "parameters": "list[object]",
        "result_format": "ResultFormat",
    }

    attribute_map = {
        "init_commands": "init_commands",
        "query": "query",
        "parameters": "parameters",
        "result_format": "result_format",
    }

    def __init__(
        self,
        init_commands=None,
        query=None,
        parameters=None,
        result_format=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """TGSQLNodeData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._init_commands = None
        self._query = None
        self._parameters = None
        self._result_format = None
        self.discriminator = None

        if init_commands is not None:
            self.init_commands = init_commands
        if query is not None:
            self.query = query
        if parameters is not None:
            self.parameters = parameters
        if result_format is not None:
            self.result_format = result_format

    @property
    def init_commands(self):
        """Gets the init_commands of this TGSQLNodeData.  # noqa: E501

        The commands to execute before running the query itself.  # noqa: E501

        :return: The init_commands of this TGSQLNodeData.  # noqa: E501
        :rtype: list[str]
        """
        return self._init_commands

    @init_commands.setter
    def init_commands(self, init_commands):
        """Sets the init_commands of this TGSQLNodeData.

        The commands to execute before running the query itself.  # noqa: E501

        :param init_commands: The init_commands of this TGSQLNodeData.  # noqa: E501
        :type: list[str]
        """

        self._init_commands = init_commands

    @property
    def query(self):
        """Gets the query of this TGSQLNodeData.  # noqa: E501

        The text of the SQL query to execute. Parameters are substituted in for `?`s, just as in a regular MariaDB query.   # noqa: E501

        :return: The query of this TGSQLNodeData.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this TGSQLNodeData.

        The text of the SQL query to execute. Parameters are substituted in for `?`s, just as in a regular MariaDB query.   # noqa: E501

        :param query: The query of this TGSQLNodeData.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def parameters(self):
        """Gets the parameters of this TGSQLNodeData.  # noqa: E501

        The parameters to substitute in for arguments in the `query`. Fixed-length. Arguments must be in JSON format.   # noqa: E501

        :return: The parameters of this TGSQLNodeData.  # noqa: E501
        :rtype: list[object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this TGSQLNodeData.

        The parameters to substitute in for arguments in the `query`. Fixed-length. Arguments must be in JSON format.   # noqa: E501

        :param parameters: The parameters of this TGSQLNodeData.  # noqa: E501
        :type: list[object]
        """

        self._parameters = parameters

    @property
    def result_format(self):
        """Gets the result_format of this TGSQLNodeData.  # noqa: E501


        :return: The result_format of this TGSQLNodeData.  # noqa: E501
        :rtype: ResultFormat
        """
        return self._result_format

    @result_format.setter
    def result_format(self, result_format):
        """Sets the result_format of this TGSQLNodeData.


        :param result_format: The result_format of this TGSQLNodeData.  # noqa: E501
        :type: ResultFormat
        """

        self._result_format = result_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TGSQLNodeData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TGSQLNodeData):
            return True

        return self.to_dict() != other.to_dict()
