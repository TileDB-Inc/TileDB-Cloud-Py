# coding: utf-8

"""
    TileDB Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 2.2.19
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.cloud.rest_api.configuration import Configuration


class TaskGraphLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "uuid": "str",
        "namespace": "str",
        "created_by": "str",
        "name": "str",
        "created_at": "datetime",
        "start_time": "datetime",
        "end_time": "datetime",
        "status": "TaskGraphLogStatus",
        "nodes": "list[TaskGraphNodeMetadata]",
    }

    attribute_map = {
        "uuid": "uuid",
        "namespace": "namespace",
        "created_by": "created_by",
        "name": "name",
        "created_at": "created_at",
        "start_time": "start_time",
        "end_time": "end_time",
        "status": "status",
        "nodes": "nodes",
    }

    def __init__(
        self,
        uuid=None,
        namespace=None,
        created_by=None,
        name=None,
        created_at=None,
        start_time=None,
        end_time=None,
        status=None,
        nodes=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """TaskGraphLog - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uuid = None
        self._namespace = None
        self._created_by = None
        self._name = None
        self._created_at = None
        self._start_time = None
        self._end_time = None
        self._status = None
        self._nodes = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if namespace is not None:
            self.namespace = namespace
        if created_by is not None:
            self.created_by = created_by
        if name is not None:
            self.name = name
        if created_at is not None:
            self.created_at = created_at
        self.start_time = start_time
        self.end_time = end_time
        if status is not None:
            self.status = status
        if nodes is not None:
            self.nodes = nodes

    @property
    def uuid(self):
        """Gets the uuid of this TaskGraphLog.  # noqa: E501

        The server-generated UUID of the task graph.  # noqa: E501

        :return: The uuid of this TaskGraphLog.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this TaskGraphLog.

        The server-generated UUID of the task graph.  # noqa: E501

        :param uuid: The uuid of this TaskGraphLog.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def namespace(self):
        """Gets the namespace of this TaskGraphLog.  # noqa: E501

        The namespace that owns this task graph log. When creating a task graph log, this is used as the namespace to create the log in; thereafter it is read-only.   # noqa: E501

        :return: The namespace of this TaskGraphLog.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this TaskGraphLog.

        The namespace that owns this task graph log. When creating a task graph log, this is used as the namespace to create the log in; thereafter it is read-only.   # noqa: E501

        :param namespace: The namespace of this TaskGraphLog.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def created_by(self):
        """Gets the created_by of this TaskGraphLog.  # noqa: E501

        The name of the user who created this task graph log.  # noqa: E501

        :return: The created_by of this TaskGraphLog.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TaskGraphLog.

        The name of the user who created this task graph log.  # noqa: E501

        :param created_by: The created_by of this TaskGraphLog.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def name(self):
        """Gets the name of this TaskGraphLog.  # noqa: E501

        A name for this task graph log, displayed in the UI. Does not need to be unique.   # noqa: E501

        :return: The name of this TaskGraphLog.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskGraphLog.

        A name for this task graph log, displayed in the UI. Does not need to be unique.   # noqa: E501

        :param name: The name of this TaskGraphLog.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this TaskGraphLog.  # noqa: E501

        The date/time when this task graph log was originally created. This is distinct from the execution start_time.   # noqa: E501

        :return: The created_at of this TaskGraphLog.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TaskGraphLog.

        The date/time when this task graph log was originally created. This is distinct from the execution start_time.   # noqa: E501

        :param created_at: The created_at of this TaskGraphLog.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def start_time(self):
        """Gets the start_time of this TaskGraphLog.  # noqa: E501

        The start time of the task graph, recorded when the server starts executing the first node.   # noqa: E501

        :return: The start_time of this TaskGraphLog.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TaskGraphLog.

        The start time of the task graph, recorded when the server starts executing the first node.   # noqa: E501

        :param start_time: The start_time of this TaskGraphLog.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this TaskGraphLog.  # noqa: E501

        The end time of the task graph, recorded when the client reports completion.   # noqa: E501

        :return: The end_time of this TaskGraphLog.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TaskGraphLog.

        The end time of the task graph, recorded when the client reports completion.   # noqa: E501

        :param end_time: The end_time of this TaskGraphLog.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def status(self):
        """Gets the status of this TaskGraphLog.  # noqa: E501


        :return: The status of this TaskGraphLog.  # noqa: E501
        :rtype: TaskGraphLogStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskGraphLog.


        :param status: The status of this TaskGraphLog.  # noqa: E501
        :type: TaskGraphLogStatus
        """

        self._status = status

    @property
    def nodes(self):
        """Gets the nodes of this TaskGraphLog.  # noqa: E501

        The structure of the graph. This is provided by the client when first setting up the task graph. Thereafter, it is read-only. This must be topographically sorted; that is, each node must appear after all nodes that it depends upon.   # noqa: E501

        :return: The nodes of this TaskGraphLog.  # noqa: E501
        :rtype: list[TaskGraphNodeMetadata]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this TaskGraphLog.

        The structure of the graph. This is provided by the client when first setting up the task graph. Thereafter, it is read-only. This must be topographically sorted; that is, each node must appear after all nodes that it depends upon.   # noqa: E501

        :param nodes: The nodes of this TaskGraphLog.  # noqa: E501
        :type: list[TaskGraphNodeMetadata]
        """

        self._nodes = nodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskGraphLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskGraphLog):
            return True

        return self.to_dict() != other.to_dict()
