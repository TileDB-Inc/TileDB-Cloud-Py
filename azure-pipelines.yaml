trigger:
  tags:
    include:
      - v*
  branches:
    include:
    - master


# test and upload my code as an artifact named WebSite
jobs:
- job: Build
  strategy:
    matrix:
      mac_36:
        imageName: 'macOS-10.13'
        python.version: '3.6'
      mac_37:
        imageName: 'macOS-10.13'
        python.version: '3.7'
      #linux_py35:
      #  imageName: 'ubuntu-16.04'
      #  python.version: '3.5'
      linux_py36:
        imageName: 'ubuntu-16.04'
        python.version: '3.6'
      linux_py37:
        imageName: 'ubuntu-16.04'
        python.version: '3.7'
  pool:
    vmImage: $(imageName)

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: python -m pip install --upgrade 'numpy==1.17.*' pytest
    # pip installs release candidates by default:
    #   https://github.com/pypa/pip/issues/4969
    displayName: 'Install dependencies'

  - script: python -m pip install --upgrade black
    displayName: 'Install black (linter)'
    condition: eq(variables['python.version'], '3.7')
  - script: black --check .
    displayName: 'Test Formating'
    condition: eq(variables['python.version'], '3.7')

  - script: python -m pip install --upgrade .
    displayName: 'Test Install'
    condition: ne(variables['Agent.OS'], 'Windows_NT')

    # Build the python distribution from source
  - script: python setup.py bdist_wheel
    displayName: 'Build wheel'
    condition: ne(variables['Agent.OS'], 'Windows_NT')

  - bash: |
      set -xeo pipefail
      # Display log files if the build failed
      echo "Dumping log files for failed build"
      echo "----------------------------------"
      for f in $(find $BUILD_REPOSITORY_LOCALPATH/build -name *.log);
        do echo "------"
           echo $f
           echo "======"
           cat $f
        done;
    condition: failed() # only run this job if the build step failed
    displayName: "Print log files (failed build only)"

  - bash: |
      set -xeo pipefail
      pytest
    condition: eq(variables['Agent.OS'], 'Linux')
    env:
      TILEDB_CLOUD_HELPER_VAR: $(TILEDB_CLOUD_HELPER_VAR)
    displayName: "Run tests (Linux only)"

# download the artifact and deploy it only if the build job succeeded
- job: Deploy
  pool:
    vmImage: 'ubuntu-16.04'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: 'x64'

  - script: 'pip install twine wheel setuptools setuptools_scm'
    displayName: 'Install twine/wheel'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))

    # Build the python distribution from source
  - script: python setup.py bdist_wheel
    displayName: 'Build wheel'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))

  - task: TwineAuthenticate@1
    displayName: 'Twine Authenticate'
    inputs:
      pythonUploadServiceConnection: 'pypi-upload'

  - script: python -m twine upload -r "pypi-upload" --config-file $(PYPIRC_PATH) dist/*.whl
    displayName: 'Upload to Pypi'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
