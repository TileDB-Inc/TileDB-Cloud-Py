name: autobuild

on:
  pull_request:
    branches: ["*"]
  push:
    branches: [main]
  release:
    types: [published]
  schedule:
    # 01:30 UTC = 20:30/21:30 America/New_York = 03:30/04:30 Europe/Athens
    - cron: "30 1 * * *"

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.7"
          cache: pip
          cache-dependency-path: ".github/workflows/tiledb-cloud-py.yaml"
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Restore pre-commit cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Pre-commit checks
        run: pre-commit run -a -v

  run-tests:
    runs-on: ${{ matrix.os }}
    if: ${{ github.event_name != 'release' }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - macos-12
        python-version: ["3.9", "3.7"]
        dependencies:
          - pinned
          - fresh
        include:
          - os: ubuntu-20.04
            path: ~/.cache/pip
          - os: macos-12
            path: ~/Library/Caches/pip

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pinned dependencies
        if: ${{ matrix.dependencies == 'pinned' }}
        uses: actions/cache@v3
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles(format('./requirements-py{0}.txt', matrix.python-version)) }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-pip-

      # This step ensures that every month we have a new Pip cache, so that
      # we don't have one cache sitting for months growing ever-staler.
      - name: Get month for cache key
        id: month
        if: ${{ matrix.dependencies == 'fresh' }}
        run: |
          date +'cache-month=%Y-%m' >> "$GITHUB_ENV"

      - name: Cache fresh install dependencies
        if: ${{ matrix.dependencies == 'fresh' }}
        uses: actions/cache@v3
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-fresh-${{ env.cache-month }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-pip-fresh-
            ${{ runner.os }}-py${{ matrix.python-version }}-pip-

      - name: Install prerequisites
        run: |
          pip install --upgrade pip wheel pytest pytest-cov setuptools setuptools-scm

      - name: Install pinned dependencies
        if: ${{ matrix.dependencies == 'pinned' }}
        run: |
          pip install -r requirements-py${{ matrix.python-version }}.txt

      - name: Install TileDB-Cloud-Py
        run: |
          pip install .

      - name: Run tests
        # Test pinned dependencies on commit / tag and fresh installs on nightlies
        if: (matrix.dependencies == 'fresh') == (github.event_name == 'schedule')
        run: |
          pytest -s -v --junitxml=junit/test-results.xml --cov=tiledb/cloud/ --cov-report=xml --cov-report=html
        env:
          TILEDB_REST_TOKEN: ${{ secrets.TILEDB_CLOUD_HELPER_VAR }}

  upload-to-pypi:
    # Upload a wheel only if the entire matrix succeeds.
    needs:
      - format-check
    # Run on release, or on commits to the primary branch.
    # Artifacts are uploaded to the real PyPI only when a release is published;
    # otherwise, they are sent just to the test instance.
    if: >
      (github.event_name == 'release' && github.event.action == 'published') ||
      (github.event_name == 'push')

    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.7"
          cache: pip
          cache-dependency-path: requirements-py3.7.txt

      - name: Make fake version for Test PyPI
        if: ${{ github.event_name != 'release' }}
        run: |
          date -u +'SETUPTOOLS_SCM_PRETEND_VERSION=0.0.0.dev%Y%m%d%H%M' >> "$GITHUB_ENV"

      - name: Build wheel
        run: |
          pip install --upgrade pip build wheel setuptools setuptools-scm
          pip install -r requirements-py3.7.txt
          python -m build

      - name: Publish to PyPI
        if: ${{ github.event_name == 'release' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          # It's OK if this fails due to an already-existing file,
          # if the test publish was run more than once for a revision.
          skip-existing: true
