# coding: utf-8

"""
    Tiledb Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import datetime
import unittest

import tiledb.cloud._common.api_v2
from tiledb.cloud._common.api_v2.models.fragment_metadata import (  # noqa: E501
    FragmentMetadata,
)
from tiledb.cloud._common.api_v2.rest import ApiException


class TestFragmentMetadata(unittest.TestCase):
    """FragmentMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test FragmentMetadata
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # model = tiledb.cloud._common.api_v2.models.fragment_metadata.FragmentMetadata()  # noqa: E501
        if include_optional:
            return FragmentMetadata(
                file_sizes=[1.337],
                file_var_sizes=[1.337],
                file_validity_sizes=[1.337],
                fragment_uri="0",
                has_timestamps=True,
                has_delete_meta=True,
                sparse_tile_num=1.337,
                tile_index_base=1.337,
                tile_offsets=[[1.337]],
                tile_var_offsets=[[1.337]],
                tile_var_sizes=[[1.337]],
                tile_validity_offsets=[[1.337]],
                tile_min_buffer=[[1.337]],
                tile_min_var_buffer=[[1.337]],
                tile_max_buffer=[[1.337]],
                tile_max_var_buffer=[[1.337]],
                tile_sums=[[1.337]],
                tile_null_counts=[[1.337]],
                fragment_mins=[[1.337]],
                fragment_maxs=[[1.337]],
                fragment_sums=[1.337],
                fragment_null_counts=[1.337],
                version=56,
                timestamp_range=[1.337],
                last_tile_cell_num=56,
                non_empty_domain=tiledb.cloud._common.api_v2.models.non_empty_domain_list.NonEmptyDomainList(
                    non_empty_domains=[
                        tiledb.cloud._common.api_v2.models.non_empty_domain.NonEmptyDomain(
                            non_empty_domain=tiledb.cloud._common.api_v2.models.domain_array.DomainArray(
                                int8=[56],
                                uint8=[56],
                                int16=[56],
                                uint16=[56],
                                int32=[56],
                                uint32=[56],
                                int64=[56],
                                uint64=[56],
                                float32=[1.337],
                                float64=[1.337],
                            ),
                            is_empty=False,
                            sizes=[56],
                        )
                    ],
                ),
                rtree=bytes(b"blah"),
                has_consolidated_footer=True,
                gt_offsets=tiledb.cloud._common.api_v2.models.generic_tile_offsets.GenericTileOffsets(
                    rtree=1.337,
                    tile_offsets=[1.337],
                    tile_var_offsets=[1.337],
                    tile_var_sizes=[1.337],
                    tile_validity_offsets=[1.337],
                    tile_min_offsets=[1.337],
                    tile_max_offsets=[1.337],
                    tile_sum_offsets=[1.337],
                    tile_null_count_offsets=[1.337],
                    fragment_min_max_sum_null_count_offset=1.337,
                    processed_conditions_offsets=1.337,
                ),
            )
        else:
            return FragmentMetadata()

    def testFragmentMetadata(self):
        """Test FragmentMetadata"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
