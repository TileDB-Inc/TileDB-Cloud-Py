# coding: utf-8

"""
    Tiledb Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.cloud._common.api_v2.configuration import Configuration


class FloatScaleConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"scale": "int", "offset": "int", "byte_width": "int"}

    attribute_map = {"scale": "scale", "offset": "offset", "byte_width": "byteWidth"}

    def __init__(
        self, scale=None, offset=None, byte_width=None, local_vars_configuration=None
    ):  # noqa: E501
        """FloatScaleConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._scale = None
        self._offset = None
        self._byte_width = None
        self.discriminator = None

        if scale is not None:
            self.scale = scale
        if offset is not None:
            self.offset = offset
        if byte_width is not None:
            self.byte_width = byte_width

    @property
    def scale(self):
        """Gets the scale of this FloatScaleConfig.  # noqa: E501


        :return: The scale of this FloatScaleConfig.  # noqa: E501
        :rtype: int
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this FloatScaleConfig.


        :param scale: The scale of this FloatScaleConfig.  # noqa: E501
        :type: int
        """

        self._scale = scale

    @property
    def offset(self):
        """Gets the offset of this FloatScaleConfig.  # noqa: E501


        :return: The offset of this FloatScaleConfig.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this FloatScaleConfig.


        :param offset: The offset of this FloatScaleConfig.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def byte_width(self):
        """Gets the byte_width of this FloatScaleConfig.  # noqa: E501


        :return: The byte_width of this FloatScaleConfig.  # noqa: E501
        :rtype: int
        """
        return self._byte_width

    @byte_width.setter
    def byte_width(self, byte_width):
        """Sets the byte_width of this FloatScaleConfig.


        :param byte_width: The byte_width of this FloatScaleConfig.  # noqa: E501
        :type: int
        """

        self._byte_width = byte_width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FloatScaleConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FloatScaleConfig):
            return True

        return self.to_dict() != other.to_dict()
