# coding: utf-8

"""
    Tiledb Storage Platform API

    TileDB Storage Platform REST API

    The version of the OpenAPI document: 1.4.0
    Generated by: https://openapi-generator.tech
"""


import pprint

from tiledb.cloud._common.api_v2.configuration import Configuration


class AccessCredentialToken(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"azure": "AzureToken", "gcp": "GCPServiceAccountKey"}

    attribute_map = {"azure": "azure", "gcp": "gcp"}

    def __init__(self, azure=None, gcp=None, local_vars_configuration=None):
        """AccessCredentialToken - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._azure = None
        self._gcp = None
        self.discriminator = None

        self.azure = azure
        self.gcp = gcp

    @property
    def azure(self):
        """Gets the azure of this AccessCredentialToken.


        :return: The azure of this AccessCredentialToken.
        :rtype: AzureToken
        """
        return self._azure

    @azure.setter
    def azure(self, azure):
        """Sets the azure of this AccessCredentialToken.


        :param azure: The azure of this AccessCredentialToken.
        :type: AzureToken
        """

        self._azure = azure

    @property
    def gcp(self):
        """Gets the gcp of this AccessCredentialToken.


        :return: The gcp of this AccessCredentialToken.
        :rtype: GCPServiceAccountKey
        """
        return self._gcp

    @gcp.setter
    def gcp(self, gcp):
        """Sets the gcp of this AccessCredentialToken.


        :param gcp: The gcp of this AccessCredentialToken.
        :type: GCPServiceAccountKey
        """

        self._gcp = gcp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessCredentialToken):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccessCredentialToken):
            return True

        return self.to_dict() != other.to_dict()
