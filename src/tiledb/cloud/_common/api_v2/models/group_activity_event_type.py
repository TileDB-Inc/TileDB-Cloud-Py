# coding: utf-8

"""
    Tiledb Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.cloud._common.api_v2.configuration import Configuration


class GroupActivityEventType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CREATE = "create"
    UPDATE = "update"
    DELETE = "delete"
    REGISTER = "register"
    DEREGISTER = "deregister"
    GROUP_MEMBER_ADD = "group_member_add"
    GROUP_MEMBER_GET = "group_member_get"
    GROUP_MEMBER_REMOVE = "group_member_remove"
    GROUP_METADATA_GET = "group_metadata_get"
    GROUP_METADATA_UPDATE = "group_metadata_update"
    GROUP_METADATA_DELETE = "group_metadata_delete"
    GROUP_METADATA_SERIALIZE = "group_metadata_serialize"
    GROUP_METADATA_DESERIALIZE = "group_metadata_deserialize"
    GROUP_METADATA_CONSOLIDATE = "group_metadata_consolidate"
    GROUP_METADATA_VACUUM = "group_metadata_vacuum"
    CONFIG_SET = "config_set"
    CONFIG_GET = "config_get"

    allowable_values = [
        CREATE,
        UPDATE,
        DELETE,
        REGISTER,
        DEREGISTER,
        GROUP_MEMBER_ADD,
        GROUP_MEMBER_GET,
        GROUP_MEMBER_REMOVE,
        GROUP_METADATA_GET,
        GROUP_METADATA_UPDATE,
        GROUP_METADATA_DELETE,
        GROUP_METADATA_SERIALIZE,
        GROUP_METADATA_DESERIALIZE,
        GROUP_METADATA_CONSOLIDATE,
        GROUP_METADATA_VACUUM,
        CONFIG_SET,
        CONFIG_GET,
    ]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {}

    attribute_map = {}

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """GroupActivityEventType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupActivityEventType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupActivityEventType):
            return True

        return self.to_dict() != other.to_dict()
