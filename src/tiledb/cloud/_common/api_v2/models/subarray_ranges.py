# coding: utf-8

"""
    Tiledb Storage Platform API

    TileDB Storage Platform REST API

    The version of the OpenAPI document: 1.4.0
    Generated by: https://openapi-generator.tech
"""


import pprint

from tiledb.cloud._common.api_v2.configuration import Configuration


class SubarrayRanges:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "type": "Datatype",
        "has_default_range": "bool",
        "buffer": "list[int]",
        "buffer_sizes": "list[int]",
        "buffer_start_sizes": "list[int]",
    }

    attribute_map = {
        "type": "type",
        "has_default_range": "hasDefaultRange",
        "buffer": "buffer",
        "buffer_sizes": "bufferSizes",
        "buffer_start_sizes": "bufferStartSizes",
    }

    def __init__(
        self,
        type=None,
        has_default_range=None,
        buffer=None,
        buffer_sizes=None,
        buffer_start_sizes=None,
        local_vars_configuration=None,
    ):
        """SubarrayRanges - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._has_default_range = None
        self._buffer = None
        self._buffer_sizes = None
        self._buffer_start_sizes = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if has_default_range is not None:
            self.has_default_range = has_default_range
        if buffer is not None:
            self.buffer = buffer
        if buffer_sizes is not None:
            self.buffer_sizes = buffer_sizes
        if buffer_start_sizes is not None:
            self.buffer_start_sizes = buffer_start_sizes

    @property
    def type(self):
        """Gets the type of this SubarrayRanges.


        :return: The type of this SubarrayRanges.
        :rtype: Datatype
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SubarrayRanges.


        :param type: The type of this SubarrayRanges.
        :type: Datatype
        """

        self._type = type

    @property
    def has_default_range(self):
        """Gets the has_default_range of this SubarrayRanges.

        True if the range is the default range

        :return: The has_default_range of this SubarrayRanges.
        :rtype: bool
        """
        return self._has_default_range

    @has_default_range.setter
    def has_default_range(self, has_default_range):
        """Sets the has_default_range of this SubarrayRanges.

        True if the range is the default range

        :param has_default_range: The has_default_range of this SubarrayRanges.
        :type: bool
        """

        self._has_default_range = has_default_range

    @property
    def buffer(self):
        """Gets the buffer of this SubarrayRanges.

        The bytes of the ranges

        :return: The buffer of this SubarrayRanges.
        :rtype: list[int]
        """
        return self._buffer

    @buffer.setter
    def buffer(self, buffer):
        """Sets the buffer of this SubarrayRanges.

        The bytes of the ranges

        :param buffer: The buffer of this SubarrayRanges.
        :type: list[int]
        """

        self._buffer = buffer

    @property
    def buffer_sizes(self):
        """Gets the buffer_sizes of this SubarrayRanges.

        The list of sizes per range

        :return: The buffer_sizes of this SubarrayRanges.
        :rtype: list[int]
        """
        return self._buffer_sizes

    @buffer_sizes.setter
    def buffer_sizes(self, buffer_sizes):
        """Sets the buffer_sizes of this SubarrayRanges.

        The list of sizes per range

        :param buffer_sizes: The buffer_sizes of this SubarrayRanges.
        :type: list[int]
        """

        self._buffer_sizes = buffer_sizes

    @property
    def buffer_start_sizes(self):
        """Gets the buffer_start_sizes of this SubarrayRanges.

        The list of start sizes per range

        :return: The buffer_start_sizes of this SubarrayRanges.
        :rtype: list[int]
        """
        return self._buffer_start_sizes

    @buffer_start_sizes.setter
    def buffer_start_sizes(self, buffer_start_sizes):
        """Sets the buffer_start_sizes of this SubarrayRanges.

        The list of start sizes per range

        :param buffer_start_sizes: The buffer_start_sizes of this SubarrayRanges.
        :type: list[int]
        """

        self._buffer_start_sizes = buffer_start_sizes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubarrayRanges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubarrayRanges):
            return True

        return self.to_dict() != other.to_dict()
