# coding: utf-8

"""
    Tiledb Storage Platform API

    TileDB Storage Platform REST API

    The version of the OpenAPI document: 1.4.0
    Generated by: https://openapi-generator.tech
"""


import pprint

from tiledb.cloud._common.api_v2.configuration import Configuration


class DeleteAndUpdateTileLocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"uri": "str", "condition_marker": "str", "offset": "float"}

    attribute_map = {
        "uri": "uri",
        "condition_marker": "conditionMarker",
        "offset": "offset",
    }

    def __init__(
        self,
        uri=None,
        condition_marker=None,
        offset=None,
        local_vars_configuration=None,
    ):
        """DeleteAndUpdateTileLocation - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uri = None
        self._condition_marker = None
        self._offset = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if condition_marker is not None:
            self.condition_marker = condition_marker
        if offset is not None:
            self.offset = offset

    @property
    def uri(self):
        """Gets the uri of this DeleteAndUpdateTileLocation.

        the uri

        :return: The uri of this DeleteAndUpdateTileLocation.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this DeleteAndUpdateTileLocation.

        the uri

        :param uri: The uri of this DeleteAndUpdateTileLocation.
        :type: str
        """

        self._uri = uri

    @property
    def condition_marker(self):
        """Gets the condition_marker of this DeleteAndUpdateTileLocation.


        :return: The condition_marker of this DeleteAndUpdateTileLocation.
        :rtype: str
        """
        return self._condition_marker

    @condition_marker.setter
    def condition_marker(self, condition_marker):
        """Sets the condition_marker of this DeleteAndUpdateTileLocation.


        :param condition_marker: The condition_marker of this DeleteAndUpdateTileLocation.
        :type: str
        """

        self._condition_marker = condition_marker

    @property
    def offset(self):
        """Gets the offset of this DeleteAndUpdateTileLocation.


        :return: The offset of this DeleteAndUpdateTileLocation.
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DeleteAndUpdateTileLocation.


        :param offset: The offset of this DeleteAndUpdateTileLocation.
        :type: float
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeleteAndUpdateTileLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeleteAndUpdateTileLocation):
            return True

        return self.to_dict() != other.to_dict()
