# coding: utf-8

"""
    Specification file for tiledb-server v4 API

    This spec is exposed to the public under /v4 route group  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: info@tiledb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.cloud._common.api_v4.configuration import Configuration


class UserSelfResponseData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"user": "User", "workspaces": "list[UserSelfWorkspace]"}

    attribute_map = {"user": "user", "workspaces": "workspaces"}

    def __init__(
        self, user=None, workspaces=None, local_vars_configuration=None
    ):  # noqa: E501
        """UserSelfResponseData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user = None
        self._workspaces = None
        self.discriminator = None

        self.user = user
        self.workspaces = workspaces

    @property
    def user(self):
        """Gets the user of this UserSelfResponseData.  # noqa: E501


        :return: The user of this UserSelfResponseData.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserSelfResponseData.


        :param user: The user of this UserSelfResponseData.  # noqa: E501
        :type: User
        """
        if (
            self.local_vars_configuration.client_side_validation and user is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `user`, must not be `None`"
            )  # noqa: E501

        self._user = user

    @property
    def workspaces(self):
        """Gets the workspaces of this UserSelfResponseData.  # noqa: E501


        :return: The workspaces of this UserSelfResponseData.  # noqa: E501
        :rtype: list[UserSelfWorkspace]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this UserSelfResponseData.


        :param workspaces: The workspaces of this UserSelfResponseData.  # noqa: E501
        :type: list[UserSelfWorkspace]
        """
        if (
            self.local_vars_configuration.client_side_validation and workspaces is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `workspaces`, must not be `None`"
            )  # noqa: E501

        self._workspaces = workspaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSelfResponseData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSelfResponseData):
            return True

        return self.to_dict() != other.to_dict()
