# coding: utf-8

"""
    Specification file for tiledb-server v4 API

    This spec is exposed to the public under /v4 route group  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: info@tiledb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.cloud._common.api_v4.configuration import Configuration


class Error(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "code": "int",
        "message": "str",
        "request_id": "str",
        "validation_error": "ValidationError",
    }

    attribute_map = {
        "code": "code",
        "message": "message",
        "request_id": "request_id",
        "validation_error": "validation_error",
    }

    def __init__(
        self,
        code=None,
        message=None,
        request_id=None,
        validation_error=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Error - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._message = None
        self._request_id = None
        self._validation_error = None
        self.discriminator = None

        self.code = code
        self.message = message
        self.request_id = request_id
        if validation_error is not None:
            self.validation_error = validation_error

    @property
    def code(self):
        """Gets the code of this Error.  # noqa: E501

        A hardcoded integer which points to a specific file/line of the code that returned the error  # noqa: E501

        :return: The code of this Error.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Error.

        A hardcoded integer which points to a specific file/line of the code that returned the error  # noqa: E501

        :param code: The code of this Error.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and code is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `code`, must not be `None`"
            )  # noqa: E501

        self._code = code

    @property
    def message(self):
        """Gets the message of this Error.  # noqa: E501

        A friendly message to be shown to the client  # noqa: E501

        :return: The message of this Error.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        A friendly message to be shown to the client  # noqa: E501

        :param message: The message of this Error.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and message is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `message`, must not be `None`"
            )  # noqa: E501

        self._message = message

    @property
    def request_id(self):
        """Gets the request_id of this Error.  # noqa: E501

        The request id to be used for tracing/debugging  # noqa: E501

        :return: The request_id of this Error.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this Error.

        The request id to be used for tracing/debugging  # noqa: E501

        :param request_id: The request_id of this Error.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and request_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `request_id`, must not be `None`"
            )  # noqa: E501

        self._request_id = request_id

    @property
    def validation_error(self):
        """Gets the validation_error of this Error.  # noqa: E501


        :return: The validation_error of this Error.  # noqa: E501
        :rtype: ValidationError
        """
        return self._validation_error

    @validation_error.setter
    def validation_error(self, validation_error):
        """Sets the validation_error of this Error.


        :param validation_error: The validation_error of this Error.  # noqa: E501
        :type: ValidationError
        """

        self._validation_error = validation_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Error):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Error):
            return True

        return self.to_dict() != other.to_dict()
