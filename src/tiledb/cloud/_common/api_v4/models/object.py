# coding: utf-8

"""
    Specification file for tiledb-server v4 API

    This spec is exposed to the public under /v4 route group  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: info@tiledb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.cloud._common.api_v4.configuration import Configuration


class Object(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "key": "str",
        "last_modified": "str",
        "e_tag": "str",
        "size": "int",
    }

    attribute_map = {
        "key": "Key",
        "last_modified": "LastModified",
        "e_tag": "ETag",
        "size": "Size",
    }

    def __init__(
        self,
        key=None,
        last_modified=None,
        e_tag=None,
        size=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Object - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self._last_modified = None
        self._e_tag = None
        self._size = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if last_modified is not None:
            self.last_modified = last_modified
        if e_tag is not None:
            self.e_tag = e_tag
        if size is not None:
            self.size = size

    @property
    def key(self):
        """Gets the key of this Object.  # noqa: E501

        The path to the file  # noqa: E501

        :return: The key of this Object.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Object.

        The path to the file  # noqa: E501

        :param key: The key of this Object.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def last_modified(self):
        """Gets the last_modified of this Object.  # noqa: E501

        The date the file was last modified  # noqa: E501

        :return: The last_modified of this Object.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Object.

        The date the file was last modified  # noqa: E501

        :param last_modified: The last_modified of this Object.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    @property
    def e_tag(self):
        """Gets the e_tag of this Object.  # noqa: E501

        The file's ETag  # noqa: E501

        :return: The e_tag of this Object.  # noqa: E501
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this Object.

        The file's ETag  # noqa: E501

        :param e_tag: The e_tag of this Object.  # noqa: E501
        :type: str
        """

        self._e_tag = e_tag

    @property
    def size(self):
        """Gets the size of this Object.  # noqa: E501

        The file's size  # noqa: E501

        :return: The size of this Object.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Object.

        The file's size  # noqa: E501

        :param size: The size of this Object.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Object):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Object):
            return True

        return self.to_dict() != other.to_dict()
