# coding: utf-8

"""
    Specification file for tiledb-server v4 API

    This spec is exposed to the public under /v4 route group  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: info@tiledb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.cloud._common.api_v4.configuration import Configuration


class Userspace(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "userspace_id": "str",
        "name": "str",
        "icon": "str",
        "created_at": "datetime",
        "description": "str",
        "updated_at": "datetime",
    }

    attribute_map = {
        "userspace_id": "userspace_id",
        "name": "name",
        "icon": "icon",
        "created_at": "created_at",
        "description": "description",
        "updated_at": "updated_at",
    }

    def __init__(
        self,
        userspace_id=None,
        name=None,
        icon=None,
        created_at=None,
        description=None,
        updated_at=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Userspace - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._userspace_id = None
        self._name = None
        self._icon = None
        self._created_at = None
        self._description = None
        self._updated_at = None
        self.discriminator = None

        self.userspace_id = userspace_id
        self.name = name
        if icon is not None:
            self.icon = icon
        self.created_at = created_at
        if description is not None:
            self.description = description
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def userspace_id(self):
        """Gets the userspace_id of this Userspace.  # noqa: E501

        The userspace's ID  # noqa: E501

        :return: The userspace_id of this Userspace.  # noqa: E501
        :rtype: str
        """
        return self._userspace_id

    @userspace_id.setter
    def userspace_id(self, userspace_id):
        """Sets the userspace_id of this Userspace.

        The userspace's ID  # noqa: E501

        :param userspace_id: The userspace_id of this Userspace.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and userspace_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `userspace_id`, must not be `None`"
            )  # noqa: E501

        self._userspace_id = userspace_id

    @property
    def name(self):
        """Gets the name of this Userspace.  # noqa: E501

        The userspace name  # noqa: E501

        :return: The name of this Userspace.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Userspace.

        The userspace name  # noqa: E501

        :param name: The name of this Userspace.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and name is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def icon(self):
        """Gets the icon of this Userspace.  # noqa: E501

        The userspace icon as a UTF8-encoded Unicode symbol, e.g. ðŸš€  # noqa: E501

        :return: The icon of this Userspace.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Userspace.

        The userspace icon as a UTF8-encoded Unicode symbol, e.g. ðŸš€  # noqa: E501

        :param icon: The icon of this Userspace.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def created_at(self):
        """Gets the created_at of this Userspace.  # noqa: E501

        The datetime the userspace was created (in UTC)  # noqa: E501

        :return: The created_at of this Userspace.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Userspace.

        The datetime the userspace was created (in UTC)  # noqa: E501

        :param created_at: The created_at of this Userspace.  # noqa: E501
        :type: datetime
        """
        if (
            self.local_vars_configuration.client_side_validation and created_at is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `created_at`, must not be `None`"
            )  # noqa: E501

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Userspace.  # noqa: E501

        The userspace description  # noqa: E501

        :return: The description of this Userspace.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Userspace.

        The userspace description  # noqa: E501

        :param description: The description of this Userspace.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def updated_at(self):
        """Gets the updated_at of this Userspace.  # noqa: E501

        The datetime the userspace was updated (in UTC)  # noqa: E501

        :return: The updated_at of this Userspace.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Userspace.

        The datetime the userspace was updated (in UTC)  # noqa: E501

        :param updated_at: The updated_at of this Userspace.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Userspace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Userspace):
            return True

        return self.to_dict() != other.to_dict()
