# coding: utf-8

"""
    Specification file for tiledb-server v4 API

    This spec is exposed to the public under /v4 route group  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: info@tiledb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.cloud._common.api_v4.configuration import Configuration


class UserAnswer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"question_id": "str", "answer_id": "str"}

    attribute_map = {"question_id": "question_id", "answer_id": "answer_id"}

    def __init__(
        self, question_id=None, answer_id=None, local_vars_configuration=None
    ):  # noqa: E501
        """UserAnswer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._question_id = None
        self._answer_id = None
        self.discriminator = None

        self.question_id = question_id
        self.answer_id = answer_id

    @property
    def question_id(self):
        """Gets the question_id of this UserAnswer.  # noqa: E501

        ID of the question in the questionnaire  # noqa: E501

        :return: The question_id of this UserAnswer.  # noqa: E501
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this UserAnswer.

        ID of the question in the questionnaire  # noqa: E501

        :param question_id: The question_id of this UserAnswer.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and question_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `question_id`, must not be `None`"
            )  # noqa: E501

        self._question_id = question_id

    @property
    def answer_id(self):
        """Gets the answer_id of this UserAnswer.  # noqa: E501

        ID of the answer in the questionnaire  # noqa: E501

        :return: The answer_id of this UserAnswer.  # noqa: E501
        :rtype: str
        """
        return self._answer_id

    @answer_id.setter
    def answer_id(self, answer_id):
        """Sets the answer_id of this UserAnswer.

        ID of the answer in the questionnaire  # noqa: E501

        :param answer_id: The answer_id of this UserAnswer.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and answer_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `answer_id`, must not be `None`"
            )  # noqa: E501

        self._answer_id = answer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAnswer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserAnswer):
            return True

        return self.to_dict() != other.to_dict()
