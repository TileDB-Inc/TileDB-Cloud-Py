# coding: utf-8

"""
    Specification file for tiledb-server v4 API

    This spec is exposed to the public under /v4 route group  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: info@tiledb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.cloud._common.api_v4.configuration import Configuration


class TileDBVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"major": "int", "minor": "int", "patch": "int"}

    attribute_map = {"major": "major", "minor": "minor", "patch": "patch"}

    def __init__(
        self, major=None, minor=None, patch=None, local_vars_configuration=None
    ):  # noqa: E501
        """TileDBVersion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._major = None
        self._minor = None
        self._patch = None
        self.discriminator = None

        self.major = major
        self.minor = minor
        self.patch = patch

    @property
    def major(self):
        """Gets the major of this TileDBVersion.  # noqa: E501

        TileDB core major version  # noqa: E501

        :return: The major of this TileDBVersion.  # noqa: E501
        :rtype: int
        """
        return self._major

    @major.setter
    def major(self, major):
        """Sets the major of this TileDBVersion.

        TileDB core major version  # noqa: E501

        :param major: The major of this TileDBVersion.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and major is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `major`, must not be `None`"
            )  # noqa: E501

        self._major = major

    @property
    def minor(self):
        """Gets the minor of this TileDBVersion.  # noqa: E501

        TileDB core minor version  # noqa: E501

        :return: The minor of this TileDBVersion.  # noqa: E501
        :rtype: int
        """
        return self._minor

    @minor.setter
    def minor(self, minor):
        """Sets the minor of this TileDBVersion.

        TileDB core minor version  # noqa: E501

        :param minor: The minor of this TileDBVersion.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and minor is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `minor`, must not be `None`"
            )  # noqa: E501

        self._minor = minor

    @property
    def patch(self):
        """Gets the patch of this TileDBVersion.  # noqa: E501

        TileDB core patch version  # noqa: E501

        :return: The patch of this TileDBVersion.  # noqa: E501
        :rtype: int
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this TileDBVersion.

        TileDB core patch version  # noqa: E501

        :param patch: The patch of this TileDBVersion.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and patch is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `patch`, must not be `None`"
            )  # noqa: E501

        self._patch = patch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TileDBVersion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TileDBVersion):
            return True

        return self.to_dict() != other.to_dict()
