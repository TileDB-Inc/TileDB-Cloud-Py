# coding: utf-8

"""
    Specification file for tiledb-server v4 API

    This spec is exposed to the public under /v4 route group  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: info@tiledb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.cloud._common.api_v4.configuration import Configuration


class InvitingUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "user_id": "str",
        "display_name": "str",
        "email": "str",
        "image_id": "str",
        "workspace_role": "WorkspaceRole",
    }

    attribute_map = {
        "user_id": "user_id",
        "display_name": "display_name",
        "email": "email",
        "image_id": "image_id",
        "workspace_role": "workspace_role",
    }

    def __init__(
        self,
        user_id=None,
        display_name=None,
        email=None,
        image_id=None,
        workspace_role=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """InvitingUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._display_name = None
        self._email = None
        self._image_id = None
        self._workspace_role = None
        self.discriminator = None

        self.user_id = user_id
        self.display_name = display_name
        self.email = email
        self.image_id = image_id
        self.workspace_role = workspace_role

    @property
    def user_id(self):
        """Gets the user_id of this InvitingUser.  # noqa: E501

        The user's ID  # noqa: E501

        :return: The user_id of this InvitingUser.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InvitingUser.

        The user's ID  # noqa: E501

        :param user_id: The user_id of this InvitingUser.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and user_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `user_id`, must not be `None`"
            )  # noqa: E501

        self._user_id = user_id

    @property
    def display_name(self):
        """Gets the display_name of this InvitingUser.  # noqa: E501

        The user's display name  # noqa: E501

        :return: The display_name of this InvitingUser.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InvitingUser.

        The user's display name  # noqa: E501

        :param display_name: The display_name of this InvitingUser.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and display_name is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `display_name`, must not be `None`"
            )  # noqa: E501

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this InvitingUser.  # noqa: E501

        The user's email  # noqa: E501

        :return: The email of this InvitingUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InvitingUser.

        The user's email  # noqa: E501

        :param email: The email of this InvitingUser.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and email is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `email`, must not be `None`"
            )  # noqa: E501

        self._email = email

    @property
    def image_id(self):
        """Gets the image_id of this InvitingUser.  # noqa: E501

        The image's ID  # noqa: E501

        :return: The image_id of this InvitingUser.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this InvitingUser.

        The image's ID  # noqa: E501

        :param image_id: The image_id of this InvitingUser.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and image_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `image_id`, must not be `None`"
            )  # noqa: E501

        self._image_id = image_id

    @property
    def workspace_role(self):
        """Gets the workspace_role of this InvitingUser.  # noqa: E501


        :return: The workspace_role of this InvitingUser.  # noqa: E501
        :rtype: WorkspaceRole
        """
        return self._workspace_role

    @workspace_role.setter
    def workspace_role(self, workspace_role):
        """Sets the workspace_role of this InvitingUser.


        :param workspace_role: The workspace_role of this InvitingUser.  # noqa: E501
        :type: WorkspaceRole
        """
        if (
            self.local_vars_configuration.client_side_validation
            and workspace_role is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `workspace_role`, must not be `None`"
            )  # noqa: E501

        self._workspace_role = workspace_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvitingUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvitingUser):
            return True

        return self.to_dict() != other.to_dict()
