# coding: utf-8

"""
    Specification file for tiledb-server v4 API

    This spec is exposed to the public under /v4 route group  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: info@tiledb.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.cloud._common.api_v4.configuration import Configuration


class Teamspace(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "teamspace_id": "str",
        "name": "str",
        "icon": "str",
        "created_at": "datetime",
        "created_by": "TeamspaceUser",
        "description": "str",
        "_self": "TeamspaceUser",
        "visibility": "TeamspaceVisibility",
        "updated_at": "datetime",
    }

    attribute_map = {
        "teamspace_id": "teamspace_id",
        "name": "name",
        "icon": "icon",
        "created_at": "created_at",
        "created_by": "created_by",
        "description": "description",
        "_self": "self",
        "visibility": "visibility",
        "updated_at": "updated_at",
    }

    def __init__(
        self,
        teamspace_id=None,
        name=None,
        icon=None,
        created_at=None,
        created_by=None,
        description=None,
        _self=None,
        visibility=None,
        updated_at=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Teamspace - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._teamspace_id = None
        self._name = None
        self._icon = None
        self._created_at = None
        self._created_by = None
        self._description = None
        self.__self = None
        self._visibility = None
        self._updated_at = None
        self.discriminator = None

        self.teamspace_id = teamspace_id
        self.name = name
        if icon is not None:
            self.icon = icon
        self.created_at = created_at
        self.created_by = created_by
        if description is not None:
            self.description = description
        if _self is not None:
            self._self = _self
        self.visibility = visibility
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def teamspace_id(self):
        """Gets the teamspace_id of this Teamspace.  # noqa: E501

        The teamspace's ID  # noqa: E501

        :return: The teamspace_id of this Teamspace.  # noqa: E501
        :rtype: str
        """
        return self._teamspace_id

    @teamspace_id.setter
    def teamspace_id(self, teamspace_id):
        """Sets the teamspace_id of this Teamspace.

        The teamspace's ID  # noqa: E501

        :param teamspace_id: The teamspace_id of this Teamspace.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and teamspace_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `teamspace_id`, must not be `None`"
            )  # noqa: E501

        self._teamspace_id = teamspace_id

    @property
    def name(self):
        """Gets the name of this Teamspace.  # noqa: E501

        The teamspace name  # noqa: E501

        :return: The name of this Teamspace.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Teamspace.

        The teamspace name  # noqa: E501

        :param name: The name of this Teamspace.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and name is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def icon(self):
        """Gets the icon of this Teamspace.  # noqa: E501

        The teamspace icon as a UTF8-encoded Unicode symbol, e.g. ðŸš€  # noqa: E501

        :return: The icon of this Teamspace.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Teamspace.

        The teamspace icon as a UTF8-encoded Unicode symbol, e.g. ðŸš€  # noqa: E501

        :param icon: The icon of this Teamspace.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def created_at(self):
        """Gets the created_at of this Teamspace.  # noqa: E501

        The datetime the teamspace was created (in UTC)  # noqa: E501

        :return: The created_at of this Teamspace.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Teamspace.

        The datetime the teamspace was created (in UTC)  # noqa: E501

        :param created_at: The created_at of this Teamspace.  # noqa: E501
        :type: datetime
        """
        if (
            self.local_vars_configuration.client_side_validation and created_at is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `created_at`, must not be `None`"
            )  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Teamspace.  # noqa: E501


        :return: The created_by of this Teamspace.  # noqa: E501
        :rtype: TeamspaceUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Teamspace.


        :param created_by: The created_by of this Teamspace.  # noqa: E501
        :type: TeamspaceUser
        """
        if (
            self.local_vars_configuration.client_side_validation and created_by is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `created_by`, must not be `None`"
            )  # noqa: E501

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this Teamspace.  # noqa: E501

        The teamspace description  # noqa: E501

        :return: The description of this Teamspace.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Teamspace.

        The teamspace description  # noqa: E501

        :param description: The description of this Teamspace.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def _self(self):
        """Gets the _self of this Teamspace.  # noqa: E501


        :return: The _self of this Teamspace.  # noqa: E501
        :rtype: TeamspaceUser
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this Teamspace.


        :param _self: The _self of this Teamspace.  # noqa: E501
        :type: TeamspaceUser
        """

        self.__self = _self

    @property
    def visibility(self):
        """Gets the visibility of this Teamspace.  # noqa: E501


        :return: The visibility of this Teamspace.  # noqa: E501
        :rtype: TeamspaceVisibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Teamspace.


        :param visibility: The visibility of this Teamspace.  # noqa: E501
        :type: TeamspaceVisibility
        """
        if (
            self.local_vars_configuration.client_side_validation and visibility is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `visibility`, must not be `None`"
            )  # noqa: E501

        self._visibility = visibility

    @property
    def updated_at(self):
        """Gets the updated_at of this Teamspace.  # noqa: E501

        The datetime the teamspace was updated (in UTC)  # noqa: E501

        :return: The updated_at of this Teamspace.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Teamspace.

        The datetime the teamspace was updated (in UTC)  # noqa: E501

        :param updated_at: The updated_at of this Teamspace.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Teamspace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Teamspace):
            return True

        return self.to_dict() != other.to_dict()
