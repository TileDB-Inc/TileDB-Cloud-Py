# coding: utf-8

"""
    TileDB Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 2.2.19
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import datetime
import unittest

import tiledb.cloud.rest_api
from tiledb.cloud.rest_api.models.fragment_info import FragmentInfo  # noqa: E501
from tiledb.cloud.rest_api.rest import ApiException


class TestFragmentInfo(unittest.TestCase):
    """FragmentInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test FragmentInfo
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # model = tiledb.cloud.rest_api.models.fragment_info.FragmentInfo()  # noqa: E501
        if include_optional:
            return FragmentInfo(
                array_schema_all={
                    "key": tiledb.cloud.rest_api.models.array_schema.ArraySchema(
                        uri="s3://<bucket>/test_array",
                        version=[1, 3, 0],
                        array_type="dense",
                        tile_order="row-major",
                        cell_order="row-major",
                        capacity=100000,
                        coords_filter_pipeline=tiledb.cloud.rest_api.models.filter_pipeline.FilterPipeline(
                            filters=[
                                tiledb.cloud.rest_api.models.filter.Filter(
                                    type="FILTER_NONE",
                                    data=tiledb.cloud.rest_api.models.filter_data.Filter_data(
                                        int8=56,
                                        uint8=56,
                                        int16=56,
                                        uint16=56,
                                        int32=56,
                                        uint32=56,
                                        int64=56,
                                        uint64=56,
                                        float32=56,
                                        float64=56,
                                    ),
                                )
                            ],
                        ),
                        offset_filter_pipeline=tiledb.cloud.rest_api.models.filter_pipeline.FilterPipeline(),
                        domain=tiledb.cloud.rest_api.models.domain.Domain(
                            type="INT32",
                            tile_order="row-major",
                            cell_order="row-major",
                            dimensions=[
                                tiledb.cloud.rest_api.models.dimension.Dimension(
                                    name="row",
                                    type="INT32",
                                    domain=tiledb.cloud.rest_api.models.domain_array.DomainArray(
                                        int8=[56],
                                        uint8=[56],
                                        int16=[56],
                                        uint16=[56],
                                        int32=[56],
                                        uint32=[56],
                                        int64=[56],
                                        uint64=[56],
                                        float32=[1.337],
                                        float64=[1.337],
                                    ),
                                    null_tile_extent=True,
                                    tile_extent=tiledb.cloud.rest_api.models.dimension_tile_extent.Dimension_tileExtent(),
                                    filter_pipeline=tiledb.cloud.rest_api.models.filter_pipeline.FilterPipeline(),
                                )
                            ],
                        ),
                        attributes=[
                            tiledb.cloud.rest_api.models.attribute.Attribute(
                                name="attribute1",
                                type="INT32",
                                filter_pipeline=tiledb.cloud.rest_api.models.filter_pipeline.FilterPipeline(),
                                cell_val_num=1,
                                nullable=True,
                                fill_value=[56],
                            )
                        ],
                        allows_duplicates=True,
                    )
                },
                fragment_info=[
                    tiledb.cloud.rest_api.models.single_fragment_info.SingleFragmentInfo(
                        array_schema_name="0",
                        meta=tiledb.cloud.rest_api.models.fragment_metadata.FragmentMetadata(
                            file_sizes=[56],
                            file_var_sizes=[56],
                            file_validity_sizes=[56],
                            fragment_uri="0",
                            has_timestamps=True,
                            has_delete_meta=True,
                            sparse_tile_num=56,
                            tile_index_base=56,
                            tile_offsets=[[56]],
                            tile_var_offsets=[[56]],
                            tile_var_sizes=[[56]],
                            tile_validity_offsets=[[56]],
                            tile_min_buffer=[[56]],
                            tile_min_var_buffer=[[56]],
                            tile_max_buffer=[[56]],
                            tile_max_var_buffer=[[56]],
                            tile_sums=[[56]],
                            tile_null_counts=[[56]],
                            fragment_mins=[[56]],
                            fragment_maxs=[[56]],
                            fragment_sums=[56],
                            fragment_null_counts=[56],
                            version=56,
                            timestamp_range=[56],
                            last_tile_cell_num=56,
                        ),
                    )
                ],
                to_vacuum=["0"],
            )
        else:
            return FragmentInfo()

    def testFragmentInfo(self):
        """Test FragmentInfo"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
