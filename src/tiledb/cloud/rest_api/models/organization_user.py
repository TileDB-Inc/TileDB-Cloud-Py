# coding: utf-8

"""
    TileDB Storage Platform API

    TileDB Storage Platform REST API

    The version of the OpenAPI document: 2.17.51
    Generated by: https://openapi-generator.tech
"""


import pprint

from tiledb.cloud.rest_api.configuration import Configuration


class OrganizationUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "user_id": "str",
        "organization_id": "str",
        "username": "str",
        "organization_name": "str",
        "role": "OrganizationRoles",
        "allowed_actions": "list[NamespaceActions]",
    }

    attribute_map = {
        "user_id": "user_id",
        "organization_id": "organization_id",
        "username": "username",
        "organization_name": "organization_name",
        "role": "role",
        "allowed_actions": "allowed_actions",
    }

    def __init__(
        self,
        user_id=None,
        organization_id=None,
        username=None,
        organization_name=None,
        role=None,
        allowed_actions=None,
        local_vars_configuration=None,
    ):
        """OrganizationUser - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._organization_id = None
        self._username = None
        self._organization_name = None
        self._role = None
        self._allowed_actions = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if organization_id is not None:
            self.organization_id = organization_id
        if username is not None:
            self.username = username
        if organization_name is not None:
            self.organization_name = organization_name
        if role is not None:
            self.role = role
        if allowed_actions is not None:
            self.allowed_actions = allowed_actions

    @property
    def user_id(self):
        """Gets the user_id of this OrganizationUser.

        unique ID of user

        :return: The user_id of this OrganizationUser.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OrganizationUser.

        unique ID of user

        :param user_id: The user_id of this OrganizationUser.
        :type: str
        """

        self._user_id = user_id

    @property
    def organization_id(self):
        """Gets the organization_id of this OrganizationUser.

        unique ID of organization

        :return: The organization_id of this OrganizationUser.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this OrganizationUser.

        unique ID of organization

        :param organization_id: The organization_id of this OrganizationUser.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def username(self):
        """Gets the username of this OrganizationUser.

        username for user

        :return: The username of this OrganizationUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OrganizationUser.

        username for user

        :param username: The username of this OrganizationUser.
        :type: str
        """

        self._username = username

    @property
    def organization_name(self):
        """Gets the organization_name of this OrganizationUser.

        name of organization

        :return: The organization_name of this OrganizationUser.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this OrganizationUser.

        name of organization

        :param organization_name: The organization_name of this OrganizationUser.
        :type: str
        """

        self._organization_name = organization_name

    @property
    def role(self):
        """Gets the role of this OrganizationUser.


        :return: The role of this OrganizationUser.
        :rtype: OrganizationRoles
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this OrganizationUser.


        :param role: The role of this OrganizationUser.
        :type: OrganizationRoles
        """

        self._role = role

    @property
    def allowed_actions(self):
        """Gets the allowed_actions of this OrganizationUser.

        list of actions user is allowed to do on this organization

        :return: The allowed_actions of this OrganizationUser.
        :rtype: list[NamespaceActions]
        """
        return self._allowed_actions

    @allowed_actions.setter
    def allowed_actions(self, allowed_actions):
        """Sets the allowed_actions of this OrganizationUser.

        list of actions user is allowed to do on this organization

        :param allowed_actions: The allowed_actions of this OrganizationUser.
        :type: list[NamespaceActions]
        """

        self._allowed_actions = allowed_actions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationUser):
            return True

        return self.to_dict() != other.to_dict()
