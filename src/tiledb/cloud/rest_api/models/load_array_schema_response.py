# coding: utf-8

"""
    TileDB Storage Platform API

    TileDB Storage Platform REST API  # noqa: E501

    The version of the OpenAPI document: 2.17.51
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tiledb.cloud.rest_api.configuration import Configuration


class LoadArraySchemaResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "latest_array_schema": "ArraySchema",
        "all_array_schemas": "dict(str, ArraySchema)",
    }

    attribute_map = {
        "latest_array_schema": "latest_array_schema",
        "all_array_schemas": "all_array_schemas",
    }

    def __init__(
        self,
        latest_array_schema=None,
        all_array_schemas=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """LoadArraySchemaResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._latest_array_schema = None
        self._all_array_schemas = None
        self.discriminator = None

        if latest_array_schema is not None:
            self.latest_array_schema = latest_array_schema
        if all_array_schemas is not None:
            self.all_array_schemas = all_array_schemas

    @property
    def latest_array_schema(self):
        """Gets the latest_array_schema of this LoadArraySchemaResponse.  # noqa: E501


        :return: The latest_array_schema of this LoadArraySchemaResponse.  # noqa: E501
        :rtype: ArraySchema
        """
        return self._latest_array_schema

    @latest_array_schema.setter
    def latest_array_schema(self, latest_array_schema):
        """Sets the latest_array_schema of this LoadArraySchemaResponse.


        :param latest_array_schema: The latest_array_schema of this LoadArraySchemaResponse.  # noqa: E501
        :type: ArraySchema
        """

        self._latest_array_schema = latest_array_schema

    @property
    def all_array_schemas(self):
        """Gets the all_array_schemas of this LoadArraySchemaResponse.  # noqa: E501

        map of all array schemas  # noqa: E501

        :return: The all_array_schemas of this LoadArraySchemaResponse.  # noqa: E501
        :rtype: dict(str, ArraySchema)
        """
        return self._all_array_schemas

    @all_array_schemas.setter
    def all_array_schemas(self, all_array_schemas):
        """Sets the all_array_schemas of this LoadArraySchemaResponse.

        map of all array schemas  # noqa: E501

        :param all_array_schemas: The all_array_schemas of this LoadArraySchemaResponse.  # noqa: E501
        :type: dict(str, ArraySchema)
        """

        self._all_array_schemas = all_array_schemas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoadArraySchemaResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoadArraySchemaResponse):
            return True

        return self.to_dict() != other.to_dict()
